#!/usr/bin/env bash

source message_functions || exit 1
source database_functions || exit 1
source metadata_functions || exit 1
source locate_files || exit 1

run_dir=$1 && shift
patient_db_jar=${1-/data/tools/patient-db/5.33.3/patient-db.jar} && shift
database_name=${1-hmfpatients} && shift
secret_name=${1-mysql-patients-sql-prod-1-writer} && shift

[[ -n "${run_dir}" && -n "${patient_db_jar}" && -n "${database_name}" && -n "${secret_name}" ]] \
    || die "Run with: <patient_db_jar> <database_name> <secret_name> <run_dir>"

credentials=$(gcloud secrets versions access "latest" --secret="${secret_name}" --project=hmf-secrets)
reference_sample=$(load_ref_sample_from_metadata "${run_dir}")
tumor_sample=$(load_tumor_sample_from_metadata "${run_dir}")
tumor_barcode=$(load_tumor_sample_barcode_from_metadata "${run_dir}")

db_user=$(extract_database_user "${credentials}")
db_pass=$(extract_database_password "${credentials}")
db_url=$(construct_database_url "${credentials}" "${database_name}")

for var in "${reference_sample}" "${tumor_sample}" "${tumor_barcode}" "${db_user}" "${db_pass}" "${db_url}"; do
    [[ -n "$var" ]] || die "At least one constructed variable has no content"
done

LOADERS=(amber chord cuppa flagstat linx_germline linx_somatic metrics peach signatures virusbreakend virusintrprtr purple)

main () {
    info "START load for tumor [${tumor_sample}]"
    info "  Tumor barcode: ${tumor_barcode}"
    info "  Reference name: ${reference_sample}"
    info "  Patient-db: ${patient_db_jar}"
    info "  DB URL: ${db_url}"
    info "  DB USER: ${db_user}"
    info "  Loaders: $(join_by , "${LOADERS[@]}")"

    for loader in "${LOADERS[@]}"; do
        load_function="load_${loader}"
        $load_function || die "Error running loader [${load_function}]"
    done
    info "FINISHED load for tumor [${tumor_sample}]"
}

function load_virusintrprtr () {
    info "Loading VIRUS INTERPRETER"
    local annotation_tsv="${run_dir}/virusintrprtr/${tumor_sample}.virus.annotated.tsv"
    if [[ ! -f "${annotation_tsv}" ]]; then
        # alternative directory naming exists on data-vm
        annotation_tsv="${run_dir}/virus_interpreter/${tumor_sample}.virus.annotated.tsv"
    fi
    [[ -f "${annotation_tsv}" ]] || return 1
    run_patient_db LoadVirusInterpreter \
        -sample "${tumor_sample}" \
        -virus_annotation_tsv "${annotation_tsv}"
}

function load_virusbreakend () {
    info "Loading VIRUS BREAKEND"
    local breakend_tsv="${run_dir}/virusbreakend/${tumor_sample}.virusbreakend.vcf.summary.tsv"
    [[ -f "${breakend_tsv}" ]] || return 1
    run_patient_db LoadVirusBreakendData \
        -sample "${tumor_sample}" \
        -virus_breakend_tsv "${breakend_tsv}"
}

function load_cuppa () {
    info "Loading CUPPA"
    local results_csv="${run_dir}/cuppa/${tumor_sample}.cup.data.csv"
    [[ -f "${results_csv}" ]] || return 1
    run_patient_db LoadCuppa \
        -sample "${tumor_sample}" \
        -cuppa_results_csv "${results_csv}"
}

function load_signatures () {
    info "Loading SIGNATURES"
    local input_dir="${run_dir}/sigs"
    [[ -d "${input_dir}" ]] || return 1
    run_patient_db LoadSignatures \
        -sample "${tumor_sample}" \
        -sample_dir "${input_dir}"
}

function load_peach () {
    info "Loading PEACH"
    local calls_tsv="${run_dir}/peach/${tumor_sample}.peach.calls.tsv"
    local genotype_tsv="${run_dir}/peach/${tumor_sample}.peach.genotype.tsv"
    [[ -f "${calls_tsv}" ]] || return 1
    [[ -f "${genotype_tsv}" ]] || return 1
    run_patient_db LoadPeachData \
        -sample "${tumor_sample}" \
        -peach_calls_txt "${calls_tsv}" \
        -peach_genotype_txt "${genotype_tsv}"
}

function load_chord () {
    info "Loading CHORD"
    local prediction_file="${run_dir}/chord/${tumor_sample}_chord_prediction.txt"
    [[ -f "${prediction_file}" ]] || return 1
    run_patient_db LoadChordData \
        -sample "${tumor_sample}" \
        -prediction_file "${prediction_file}"
}

function load_flagstat () {
    info "Loading FLAGSTAT"
    ref_file=$(locate_flagstat_file "${run_dir}" "${reference_sample}") || return 1
    tum_file=$(locate_flagstat_file "${run_dir}" "${tumor_sample}") || return 1
    run_patient_db LoadFlagstatData \
        -sample "${tumor_sample}" \
        -ref_flagstat_file "${ref_file}" \
        -tumor_flagstat_file "${tum_file}"
}

function locate_flagstat_file () {
    local run_dir=$1 && shift
    local sample_name=$1 && shift
    local option1="${run_dir}/${sample_name}/flagstat/${sample_name}_dedup.realigned.flagstat"
    local option2="${run_dir}/${sample_name}/flagstat/${sample_name}.flagstat"
    if [[ -f "${option1}" ]]; then
        echo "${option1}" && return 0
    elif [[ -f "${option2}" ]]; then
        echo "${option2}" && return 0
    else
        die "No flagstat file found for sample [${sample_name}] in run dir [${run_dir}]"
    fi
}

function load_metrics () {
    info "Loading BAMMETRICS"
    ref_file=$(locate_metrics_file "${run_dir}" "${reference_sample}") || return 1
    tum_file=$(locate_metrics_file "${run_dir}" "${tumor_sample}") || return 1
    run_patient_db LoadMetricsData \
        -sample "${tumor_sample}" \
        -ref_metrics_file "${ref_file}" \
        -tumor_metrics_file "${tum_file}"
}

function locate_metrics_file () {
    local run_dir=$1 && shift
    local sample_name=$1 && shift
    local option1="${run_dir}/${sample_name}/bam_metrics/${sample_name}_dedup_WGSMetrics.txt"
    local option2="${run_dir}/${sample_name}/bam_metrics/${sample_name}.wgsmetrics"
    if [[ -f "${option1}" ]]; then
        echo "${option1}" && return 0
    elif [[ -f "${option2}" ]]; then
        echo "${option2}" && return 0
    else
        die "No wgsmetrics file found for sample [${sample_name}] in run dir [${run_dir}]"
    fi
}

function load_linx_somatic () {
    info "Loading LINX somatic"
    local input_dir="${run_dir}/linx"
    [[ -d "${input_dir}" ]] || return 1
    run_patient_db LoadLinxData \
        -sample "${tumor_sample}" \
        -linx_dir "${input_dir}" \
        -somatic_only
}

function load_linx_germline () {
    info "Loading LINX germline"
    local input_dir="${run_dir}/linx_germline"
    [[ -d "${input_dir}" ]] || return 1
    run_patient_db LoadLinxData \
        -sample "${tumor_sample}" \
        -linx_dir "${input_dir}" \
        -germline_only
}

function load_purple () {
    info "Loading PURPLE"
    local input_dir="${run_dir}/purple"
    [[ -d "${input_dir}" ]] || return 1
    run_patient_db LoadPurpleData \
        -sample "${tumor_sample}" \
        -reference "${reference_sample}" \
        -purple_dir "${input_dir}"
}

function load_amber () {
    info "Loading AMBER"
    snpcheck_vcf=$(locate_amber_snpcheck_37_vcf)
    snp_vcf="${run_dir}/amber/${reference_sample}.amber.snp.vcf.gz"
    [[ -f "${snpcheck_vcf}" ]] || return 1
    [[ -f "${snp_vcf}" ]] || return 1
    run_patient_db amber.LoadAmberData \
        -sample "${tumor_sample}" \
        -amber_snp_vcf "${snp_vcf}" \
        -snpcheck_vcf "${snpcheck_vcf}"
}

function run_patient_db () {
    class=$1 && shift
    [[ -f "${patient_db_jar}" ]] || die "Unable to find patient db jar [${patient_db_jar}]"
    java -cp "${patient_db_jar}" "com.hartwig.hmftools.patientdb.${class}" \
        -db_user "${db_user}" -db_pass "${db_pass}" -db_url "${db_url}" \
        "$@"
}

function join_by { local IFS="$1"; shift; echo "$*"; }

main