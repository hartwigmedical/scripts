#!/usr/bin/env bash

source message_functions || exit 1
source lims_functions || exit 1

set=$1 && shift
protect_source=$1 && shift

[[ -n "${set}" ]] || die "No set provided. Exiting"

#Searching and selecting run (including ${inc_inis} and excluding ${exc_buckets})
inc_inis="Somatic.ini|PipelineV5.ini|CPCT.ini"
exc_buckets="research-pipeline-output-prod"
runs_json=$(
  hmf_api_get "runs?set_name=${set}" | \
  jq --arg inis "$inc_inis" --arg buckets "$exc_buckets" \
  '[.[] | select(.ini | test($inis)) | select(.bucket | test($buckets)|not)]'
)
run_count=$(jq 'length' <<< "${runs_json}")
bucket=$( echo $runs_json | jq -r '.[].bucket' )
sample_name=$( echo $runs_json | jq -r '.[].set.tumor_sample' )

[[ "${run_count}" -eq 1 ]] || warn "Multiple runs were encountered for this set (${run_count}). Info is from the most recent run!"

if [[ ${run_count} == 0 ]]; then
    warn "No run was found for ${set} on gcp."
    exit 1
fi

####

report_tumorlocation=$( get_tumorlocation_for_biopsy ${sample_name} )
if [[ "${report_tumorlocation}" == "Unknown" ]]; then
  warn "The primary tumor location provided is ${report_tumorlocation} (and it is no CUP)"
elif [[ "${report_tumorlocation}" == *"Unknown primary (e.g. CUP)"* ]]; then
  info "The primary tumor location provided is ${report_tumorlocation}, but it is a CUP so this is correct."
elif [[ "${report_tumorlocation}" == "" ]];then
  warn "The primary tumorlocation is not provided"
fi

report_doid=$( get_doids_for_biopsy ${sample_name} | sed -e $'s/;/,/g' | sed -e $'s/,/\\\n/g' | sort -n | tr '\n' ',' | sed 's/.$//' )
if [[ "${protect_source}" == "manual" ]]; then
    temp_folder_path_protect=$( pwd )"/temp_cp_${set}/protect/"
    protect_doid=$( cat ${temp_folder_path_protect}run.log | grep -w "initial tumor doids" | awk -F '[' '{print $NF}' | head -c -3 | sed -e $'s/,/\\\n/g' | sort -n | tr '\n' ',' | sed 's/.$//' | tr -d ' ')
else
    protect_url="gs://${bucket}/${set}/protect/"
    error=$( gsutil ls ${protect_url} 2>&1)
    if [[ "$error" == *"CommandException"* ]]; then
        warn "Run protect output does not exist in ${bucket} on gcp."
        exit 1
    fi
    protect_doid=$( gsutil cat ${protect_url}run.log | grep -w "initial tumor doids" | awk -F '[' '{print $NF}' | head -c -3 | sed -e $'s/,/\\\n/g' | sort -n | tr '\n' ',' | sed 's/.$//' | tr -d ' ')
fi
if [[ ${protect_doid} == "" ]]; then
    warn "Checking primary tumor doid: the doid of protect ${protect_doid} is not known"
elif [[ ${protect_doid} == ${report_doid} ]]; then
    info "Checking primary tumor doid: the doid is equal of protect ${protect_doid} and report ${report_doid}"
else
    warn "Checking primary tumor doid: the doid is not equal of protect ${protect_doid} and report ${report_doid}"
fi