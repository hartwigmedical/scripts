#!/usr/bin/env bash

source message_functions || exit 1
source locate_reporting_api || exit 1

failed_reports="dna_analysis_report_insufficient_tcp\|dna_analysis_report_insufficient_tcp_corrected\|insufficient_dna\|insufficient_tcp_deep_wgs\|insufficient_tcp_deep_wgs_corrected\|insufficient_tcp_shallow_wgs\|insufficient_tcp_shallow_wgs_corrected\|qc_fail_report\|sufficient_tcp_qc_failure"

url_bucket_report_pipline="gs://patient-reporter-prod-1/"

major_version="5.31"

main () {
    echo ""
    info "Production run status check for runs on pipeline version ${major_version} (date=$(date +'%y%m%d'))"

    info "Retrieving bucket contents [${url_bucket_report_pipline}]"
    patient_reporter_bucket_contents=$(gsutil ls "$url_bucket_report_pipline")

    info "Retrieving required information from API..."
    mapfile -t non_db_entities < <(hmf_api_get "entities" | jq -r '.[] | select(.add_to_db == false) | .name')
    all_cpct_runs=$(hmf_api_get "runs?ini=CPCT.ini" | jq '[.[] | select(.context != "RESEARCH")]') || die "Unable to retrieve CPCT runs from API"
    all_somatic_runs=$(hmf_api_get "runs?ini=Somatic.ini" | jq '[.[] | select(.context != "RESEARCH")]') || die "Unable to retrieve Somatic runs from API"
    runs=$(jq '.[]' <(echo "$all_cpct_runs") <(echo "$all_somatic_runs") | jq -s '.') || die "Unable to combine CPCT and Somatic ini runs"

    info "Creating separate run/sample collections..."
    all_vali_runs=$(echo "${runs}" | jq '[.[] | select(.status == "Validated")]')
    all_fail_runs=$(echo "${runs}" | jq '[.[] | select(.status == "Failed")]')
    all_fini_runs=$(echo "${runs}" | jq '[.[] | select(.status == "Finished")]')
    all_proc_runs=$(echo "${runs}" | jq '[.[] | select(.status == "Pending" or .status == "Processing")]')
    all_wait_runs=$(echo "${runs}" | jq '[.[] | select(.status == "Waiting")]')

    tumor_samples_with_vali_run=$(get_tumor_samples_from_runs_json "${all_vali_runs}")
    tumor_samples_with_fini_run=$(get_tumor_samples_from_runs_json "${all_fini_runs}")
    tumor_samples_with_proc_run=$(get_tumor_samples_from_runs_json "${all_proc_runs}")
    tumor_samples_with_wait_run=$(get_tumor_samples_from_runs_json "${all_wait_runs}")

    current_vali_runs=$(select_runs_to_check "${all_vali_runs}" "${major_version}")
    current_fail_runs=$(select_runs_to_check "${all_fail_runs}" "${major_version}")
    current_fini_runs=$(select_runs_to_check "${all_fini_runs}" "${major_version}")
    current_proc_runs=$(select_runs_to_check "${all_proc_runs}" "${major_version}")
    current_wait_runs=$(select_runs_to_check "${all_wait_runs}" "")

    echo ""
    echo ""
    echo "### FAILED RUNS THAT NOT HAVE BEEN REPORTED BEFORE ( please solve! ):"
    counter=0
    while read -r run_info; do
      echo
        sample_name=$(echo "${run_info}" | cut -f1)
        set_name=$(echo "${run_info}" | cut -f2)
        db_status=$(echo "${run_info}" | cut -f3)
        barcode=$(echo "${set_name}" | cut -d'_' -f4)
        research_db_status=$(get_db_status_by_set_name "${set_name}")

        has_valid_run=$(echo "${tumor_samples_with_vali_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_finished_run=$(echo "${tumor_samples_with_fini_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_processing_run=$(echo "${tumor_samples_with_proc_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_waiting_run=$(echo "${tumor_samples_with_wait_run}" | tr " " "\n" | grep -cw "${sample_name}")

        reporting_id=$(extract_most_recent_reporting_id_on_barcode ${barcode} "prod")
        shared_count=$(extract_object_shared "${reporting_id}" "prod" | wc -l)

        if [[ ${has_valid_run} == 0 && ${has_finished_run} == 0 && ${has_processing_run} == 0 && ${has_waiting_run} == 0 && ${shared_count} == 0 ]]; then
            counter=$((counter+1))
            echo "---------"
            echo "-${counter}- ${set_name}  has failed. healthchecker issue? (see below) # db_status:diagnostic=${db_status}/research=${research_db_status}"
            inspect_healthchecker_log_at_gcp ${set_name} | grep 'INFO\|WARN\|ERROR\|Health checker log from'
            Rscript determine_tat_for_barcode.R ${barcode}
            echo "**"
            echo " Action - inspect the error above and solve if possible with lab (extra sequencing for coverage and/or second biopt)... "
            echo " ...  ONLY if solving is not possible, proceed to the next steps: .."
            echo " Action - check whether the SNP check was done and was ok: perform_snpcheck_run ${set_name}"
            echo " Action - patch the api to validated: patch_api_run_validate ${set_name} "
            echo " Action - create a failed report and upload it to nc for final checking and sharing using the script: create_patient_report_failed_run ${set_name}"
            #echo " Action - when shared, move the report to the final archive using the script: copy_report_to_final_reports_gcp ${set_name}"
        fi
    done < <(echo "${current_fail_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.db_status//"NA"] | @tsv')

    echo ""
    echo ""
    echo "### FAILED RUNS THAT ALREADY HAVE BEEN REPORTED ( no action required ):"
    counter=0
    while read -r run_info; do
        sample_name=$(echo "${run_info}" | cut -f1)
        set_name=$(echo "${run_info}" | cut -f2)
        db_status=$(echo "${run_info}" | cut -f3)
        barcode=$(echo "${set_name}" | cut -d'_' -f4)
        research_db_status=$(get_db_status_by_set_name "${set_name}")

        has_valid_run=$(echo "${tumor_samples_with_vali_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_finished_run=$(echo "${tumor_samples_with_fini_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_processing_run=$(echo "${tumor_samples_with_proc_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_waiting_run=$(echo "${tumor_samples_with_wait_run}" | tr " " "\n" | grep -cw "${sample_name}")

        reporting_id=$(extract_most_recent_reporting_id_on_barcode ${barcode} "prod")
        shared_count=$(extract_object_shared "${reporting_id}" "prod" | wc -l)

        if [[  ${has_valid_run} == 0 && ${has_finished_run} == 0 && ${has_processing_run} == 0 && ${has_waiting_run} == 0 && ${shared_count} -gt 0 ]]; then
            counter=$((counter+1))
            echo "---------"
            echo "-${counter}- ${set_name} has Failed but has been reported before:         # db_status:diagnostic=${db_status}/research=${research_db_status}"
            get_reported_info_sample ${sample_name}
        fi
    done < <(echo "${current_fail_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.db_status//"NA"] | @tsv')

    echo ""
    echo ""
    echo "### FINISHED RUNS THAT NOT HAVE BEEN REPORTED BEFORE ( please solve! ):"
    counter=0
    while read -r run_info; do
        sample_name=$(echo "${run_info}" | cut -f1)
        set_name=$(echo "${run_info}" | cut -f2)
        barcode=$(echo "${set_name}" | cut -d'_' -f4)
        db_status=$(echo "${run_info}" | cut -f3)
        research_db_status=$(get_db_status_by_set_name "${set_name}")

        has_valid_run=$(echo "${tumor_samples_with_vali_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_processing_run=$(echo "${tumor_samples_with_proc_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_waiting_run=$(echo "${tumor_samples_with_wait_run}" | tr " " "\n" | grep -cw "${sample_name}")

        reporting_id=$(extract_most_recent_reporting_id_on_barcode ${barcode} "prod")
        shared_count=$(extract_object_shared "${reporting_id}" "prod" | wc -l)

        if [[ ${has_valid_run} == 0 && ${has_processing_run} == 0 && ${has_waiting_run} == 0 && ${shared_count} == 0 ]]; then
            counter=$((counter+1))
            echo "---------"
            echo "-${counter}- ${set_name} has been finished but not validated. snpcheck issue? (see below) # db_status:diagnostic=${db_status}/research=${research_db_status}"
            perform_snpcheck_run ${set_name}
            Rscript determine_tat_for_barcode.R ${barcode}
            echo "**"
            echo " Action - if snpcheck is FAIL - research the fail (follow sop)"
            echo " Action - if snpcheck is OK - update the api using the script: patch_api_run_validate ${set_name}"
        fi
    done < <(echo "${current_fini_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.db_status//"NA"] | @tsv')

    echo ""
    echo ""
    echo "### FINISHED RUNS THAT ALREADY HAVE BEEN REPORTED ( no action required ):"
    counter=0
    while read -r run_info; do
        sample_name=$(echo "${run_info}" | cut -f1)
        set_name=$(echo "${run_info}" | cut -f2)
        barcode=$(echo "${set_name}" | cut -d'_' -f4)
        db_status=$(echo "${run_info}" | cut -f3)
        research_db_status=$(get_db_status_by_set_name "${set_name}")

        has_valid_run=$(echo "${tumor_samples_with_vali_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_processing_run=$(echo "${tumor_samples_with_proc_run}" | tr " " "\n" | grep -cw "${sample_name}")
        has_waiting_run=$(echo "${tumor_samples_with_wait_run}" | tr " " "\n" | grep -cw "${sample_name}")
        reporting_id=$(extract_most_recent_reporting_id_on_barcode ${barcode} "prod")
        shared_count=$(extract_object_shared "${reporting_id}" "prod" | wc -l)

        if [[ ${has_valid_run} == 0 && ${has_processing_run} == 0 && ${has_waiting_run} == 0 && ${shared_count} -gt 0 ]]; then
            counter=$((counter+1))
            echo "---------"
            echo "-${counter}- ${set_name} has Finished but has been reported before:         # db_status:diagnostic=${db_status}/research=${research_db_status}"
            get_reported_info_sample ${sample_name}
        fi

    done < <(echo "${current_fini_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.db_status//"NA"] | @tsv')


    # validated runs pre-processing
    validated_runs_not_yet_reported=""
    while read -r run_info; do
        sample_name=$(echo "${run_info}" | cut -f1)
        set_name=$(echo "${run_info}" | cut -f2)
        entity=$(echo "${run_info}" | cut -f3)
        barcode=$(echo "${set_name}" | cut -d'_' -f4)

        reporting_id=$(extract_most_recent_reporting_id_on_barcode ${barcode} "prod")
        shared_count=$(extract_object_shared "${reporting_id}" "prod" | wc -l)

        if [[ ${set_name} =~ "_HMFregVAL_" ]]; then
            validation_ss_run=1
        else
            validation_ss_run=0
            if [[ $(printf '%s\n' "${non_db_entities[@]}" | grep -cP "^${entity}$") -gt 0 && ! "${sample_name}" =~ ^CORE.{8}T ]]; then
                ## Skip none-CORE sequencing services runs
                validation_ss_run=1
            fi
        fi
        if [[ ${shared_count} == 0 && ${validation_ss_run} == 0 ]]; then

            validated_runs_not_yet_reported=$validated_runs_not_yet_reported$set_name" "

            error="none"

            if [[ $(echo "$patient_reporter_bucket_contents" | grep -cE "${sample_name}.*\.log$") -gt 0 ]]; then
                reporter_log_file=$(grep -E "${sample_name}.*.log$" <<< "$patient_reporter_bucket_contents" | tail -1)

                # error - reporter
                doid_error=$( doid_check_validated_run "${set_name}" 2>&1 )
                reporter_log_error=$( gsutil cat "$reporter_log_file" | grep 'WARN -'  2>&1 )

                # error - reporter - summary
                if [[ "$reporter_log_error" == *"summary"* ]]; then
                     error="reporting_summary_error"
                     reporter_error="summary"
                fi
                # error - incorrect rose summary ERBB2 amplification
                rose_check_count=$(gsutil cat gs://diagnostic-pipeline-output-prod-1/${set_name}/purple/${sample_name}.driver.catalog.somatic.tsv | grep ERBB2 | grep AMP | wc -l)
                if [[ $rose_check_count  -gt 0 ]]; then
                  error="reporting_summary_error"
                  reporter_error=${reporter_error}"summary"
                fi
                # error - warn present?
                if [[ "$reporter_log_error" != *"summary"* && "$reporter_log_error" == *"WARN"*  ]]; then
                     error="reporting_error"
                     reporter_error=${reporter_error}"_warn"
                fi
                # error - reporter - primtumloc
                if [[ "$doid_error" == *"The primary tumor location provided is Unknown"* && "$doid_error" != *"The primary tumor location provided is Unknown, but it is a CUP so this is correct"* ]]; then
                     error="reporting_error"
                     reporter_error=${reporter_error}"_primtumloc"
                fi
                # error - reporter - doid
                if [[ "$doid_error" == *"the doid of protect  is not known"* || "$doid_error" == *"the doid is not equal of"* || "$reporter_log_error" == *"in list of primary tumors!"* ]]; then
                     error="reporting_error"
                     reporter_error=${reporter_error}"_doid"
                fi
                # error - reporter - lims
                if [[ "$reporter_log_error" == *"Consent"* || "$reporter_log_error" == *"Mismatching ref sample name"* || "$reporter_log_error" == *"do not match"* || "$reporter_log_error" == *"Missing or invalid hospital"* ]]; then
                     error="reporting_error"
                     reporter_error=${reporter_error}"_lims"
                fi

            else
                error="no_report_error"
            fi

            # error - no report made
            report_exists_error=$(grep -cE "${sample_name}.*dna_analysis_report.pdf$" <<< "$patient_reporter_bucket_contents")
            if [[ "$report_exists_error" == 0 ]]; then
                 error="no_report_error"
            fi

            # error - health
            health_error=$( health_check_validated_run ${set_name} 2>&1 )
            if [[ "$health_error" == *"WARN"* ]]; then
                 error="health_error"
            fi

            set_name_error="error_"$set_name
            eval ${set_name_error}=$error
         fi
    done < <(echo "${current_vali_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.entity,.db_status//"NA"] | @tsv')

    echo ""
    echo ""
    echo "### VALIDATED RUNS WITHOUT WARNINGS AND WITH REPORT ( that can now be shared ):"
    counter=0
    while read -r run_info; do
        set_name=$(echo "${run_info}" | cut -f2)
        if [[ $( echo $validated_runs_not_yet_reported | grep $set_name | wc -l ) -gt 0 ]]; then
            sample_name=$(echo "${run_info}" | cut -f1)
            set_name_error="error_"$set_name
            if [[ "${!set_name_error}" == "none" ]]; then
                counter=$((counter+1))
                echo "---------"
                db_status=$(echo "${run_info}" | cut -f4)
                research_db_status=$(get_db_status_by_set_name "${set_name}")
                echo "-${counter}- The report for ${sample_name} (run: ${set_name}) can be shared # db_status:diagnostic=${db_status}/research=${research_db_status}"
                info_validated_run ${set_name}

                reporter_log_file=$(echo "$patient_reporter_bucket_contents" | grep -E "${sample_name}.*.log$" | tail -1)
                gsutil cat "$reporter_log_file" | grep 'WARN -' | grep  "has already been reported"
                echo "Note, if you still want to inspect the log file you can run: gsutil cat ${reporter_log_file}"

                sql_checks_reporting ${sample_name}
                barcode=$(echo "${set_name}" | cut -d'_' -f4)
                Rscript determine_tat_for_barcode.R ${barcode}
                echo "**"
                echo " Action - upload the report for final checking and sharing to nc using the script: upload_pipeline_report_to_nc ${set_name}"
                #echo " Action 2 - when shared, move the report to the final archive using the script: copy_report_to_final_reports_gcp ${set_name}"
             fi
         fi
    done < <(echo "${current_vali_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.entity,.db_status//"NA"] | @tsv')

    echo ""
    echo ""
    echo "### VALIDATED RUNS WITHOUT WARNINGS BUT INCORRECT SUMMARY ( please solve! ):"
    counter=0
    while read -r run_info; do
        set_name=$(echo "${run_info}" | cut -f2)
        if [[ $( echo $validated_runs_not_yet_reported | grep $set_name | wc -l ) -gt 0 ]]; then
            sample_name=$(echo "${run_info}" | cut -f1)
            set_name_error="error_"$set_name
            if [[ "${!set_name_error}" == "reporting_summary_error" ]]; then
                counter=$((counter+1))
                echo "---------"
                db_status=$(echo "${run_info}" | cut -f4)
                research_db_status=$(get_db_status_by_set_name "${set_name}")
                echo "-${counter}- ${set_name} is validated, there were no information warnings while creating the report but the summary is missing # db_status:diagnostic=${db_status}/research=${research_db_status}"
                info_validated_run ${set_name}

                reporter_log_file=$(echo "$patient_reporter_bucket_contents" | grep -E "${sample_name}.*.log$" | tail -1)
                gsutil cat "$reporter_log_file" | grep 'WARN -'
                echo "Note, if you still want to inspect the log file you can run: gsutil cat ${reporter_log_file}"

                sql_checks_reporting ${sample_name}
                barcode=$(echo "${set_name}" | cut -d'_' -f4)
                Rscript determine_tat_for_barcode.R ${barcode}
                echo "**"
                echo " Action (temporary) - make ROSE summary using the script: create_rose_summary ${set_name}"
                echo " Action (temporary) - Update ROSE summary manually with sentence 'possible indication for ERBB2 (mAb) inhibitors' of ERRB2 amplification"
                echo " Action - upload the report for KMBP to nc using the script: upload_pipeline_report_to_nc ${set_name}"
                echo " Action - move report to STAGING/Reports-for-Summary and send + ask KMBP to check the ROSE summary."
                echo " Action -  create a new report and upload it to nc for final checking and sharing using the script:"
                echo "            create_patient_report_validated_run ${set_name}"
                #echo " Action - when shared, move the report to the final archive using the script: copy_report_to_final_reports_gcp ${set_name}"
             fi
         fi
    done < <(echo "${current_vali_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.entity,.db_status//"NA"] | @tsv')


    echo ""
    echo ""
    echo "### VALIDATED RUNS WITH (INFORMATION) WARNINGS WHILE CREATING THE REPORT ( please solve! ):"
    counter=0
    while read -r run_info; do
        set_name=$(echo "${run_info}" | cut -f2)
        if [[ $( echo $validated_runs_not_yet_reported | grep $set_name | wc -l ) -gt 0 ]]; then
            sample_name=$(echo "${run_info}" | cut -f1)
            set_name_error="error_"$set_name
            if [[ "${!set_name_error}" == "reporting_error" ]]; then
                counter=$((counter+1))
                echo "---------"
                db_status=$(echo "${run_info}" | cut -f4)
                research_db_status=$(get_db_status_by_set_name "${set_name}")
                echo "-${counter}- ${set_name} is validated, but there were information warning(s) while creating the report (see below) # db_status:diagnostic=${db_status}/research=${research_db_status}"
                info_validated_run ${set_name}
                doid_check_validated_run ${set_name}

                reporter_log_file=$(echo "$patient_reporter_bucket_contents" | grep -E "${sample_name}.*.log$" | tail -1)
                gsutil cat "$reporter_log_file" | grep 'WARN -'
                echo "Note, if you also want to inspect the log file you can run: gsutil cat ${reporter_log_file}"

                sql_checks_reporting ${sample_name}
                barcode=$(echo "${set_name}" | cut -d'_' -f4)
                Rscript determine_tat_for_barcode.R ${barcode}
                echo "**"
                echo " Action when lims information warning - ask lab to update lims, thereafter update the API using the script: update_lims"
                echo " Action when doid/clinical curation warning - solve the clinical curation (follow sop), thereafter update using the script: update_clinical_curation"
                               echo " ...  ONLY when all warning(s) are solved using above action(s), proceed to the next step: .."
                echo " Action -  create a new report and upload it to nc for final checking and sharing using the script:"
                echo "            create_patient_report_validated_run ${set_name} (when there was a doid/clinical curation warning indicate you want to rerun protect!)"
                #echo " Action - when shared, move the report to the final archive using the script: copy_report_to_final_reports_gcp ${set_name}"
             fi
         fi
    done < <(echo "${current_vali_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.entity,.db_status//"NA"] | @tsv')

    echo ""
    echo ""
    echo "### VALIDATED RUNS WITH NO REPORT CREATED ( please solve! ):"
    counter=0
    while read -r run_info; do
        set_name=$(echo "${run_info}" | cut -f2)
        if [[ $( echo $validated_runs_not_yet_reported | grep $set_name | wc -l ) -gt 0 ]]; then
            sample_name=$(echo "${run_info}" | cut -f1)
            set_name_error="error_"$set_name
            if [[ "${!set_name_error}" == "no_report_error" ]]; then
                counter=$((counter+1))
                echo "---------"
                db_status=$(echo "${run_info}" | cut -f4)
                research_db_status=$(get_db_status_by_set_name "${set_name}")
                echo "-${counter}- There were no health warnings for ${set_name}, but no report has been found for ${sample_name} # db_status:diagnostic=${db_status}/research=${research_db_status}"
                info_validated_run ${set_name}
                sql_checks_reporting ${sample_name}
                warn "No report found in the bucket ${url_bucket_report_pipline}"
                barcode=$(echo "${set_name}" | cut -d'_' -f4)
                Rscript determine_tat_for_barcode.R ${barcode}
                echo "**"
                echo " Action - create a report and upload it to nc for final checking and sharing using the script: create_patient_report_validated_run ${set_name} "
                #echo " Action - when shared, move the report to the final archive using the script: copy_report_to_final_reports_gcp ${set_name}"
             fi
         fi
    done < <(echo "${current_vali_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.entity,.db_status//"NA"] | @tsv')

    echo ""
    echo ""
    echo "### VALIDATED RUNS WITH HEALTH WARNING ( please solve! ):"
    counter=0
    while read -r run_info; do
        set_name=$(echo "${run_info}" | cut -f2)
        if [[ $( echo $validated_runs_not_yet_reported | grep $set_name | wc -l ) -gt 0 ]]; then
            sample_name=$(echo "${run_info}" | cut -f1)
            set_name_error="error_"$set_name
            if [[ "${!set_name_error}" == "health_error" ]]; then
                counter=$((counter+1))
                echo "---------"
                db_status=$(echo "${run_info}" | cut -f4)
                research_db_status=$(get_db_status_by_set_name "${set_name}")
                echo "-${counter}- ${set_name} is validated, but there is a health warning (see below) # db_status:diagnostic=${db_status}/research=${research_db_status}"
                info_validated_run ${set_name}
                health_check_validated_run ${set_name}
                sql_checks_reporting ${sample_name}
                barcode=$(echo "${set_name}" | cut -d'_' -f4)
                Rscript determine_tat_for_barcode.R ${barcode}
             fi
         fi
    done < <(echo "${current_vali_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.entity,.db_status//"NA"] | @tsv')

    validated_runs_not_yet_reported=""

    echo ""
    counter=0
    echo "### PROCESSING/UPLOADING/DOWNLOADING RUNS ( no action required ):"
    while read -r run_info; do
        counter=$((counter+1))
        set_name=$(echo "${run_info}" | cut -f1)
        status=$(echo "${run_info}" | cut -f2)
        barcode=$(echo "${set_name}" | cut -d'_' -f4)
        sample_name=$( hmf_api_get 'sets?name='${set_name}'' | jq -r '.[].samples[].name' | grep T )
        echo "# -${counter}- ${set_name} is ${status}"
        Rscript determine_tat_for_barcode.R ${barcode}
    done < <(echo "${current_proc_runs}" | jq -cr '.[] | [.set.name,.status] | @tsv')


    echo ""
    echo "### WAITING RUNS ( no action required ):"
    counter=0
    while read -r run_info; do
        counter=$((counter+1))
        set_name=$(echo "${run_info}" | cut -f1)
        status=$(echo "${run_info}" | cut -f2)
        barcode=$(echo "${set_name}" | cut -d'_' -f4)
        sample_name=$( hmf_api_get 'sets?name='${set_name}'' | jq -r '.[].samples[].name' | grep T )
        echo "# -${counter}- ${set_name} is ${status}"
        Rscript determine_tat_for_barcode.R ${barcode}
    done < <(echo "${current_wait_runs}" | jq -cr '.[] | [.set.name,.status] | @tsv')

    echo ""

    check_panel_runs_status
}

get_db_status_by_set_name () {
    local set_name=$1 && shift
    hmf_api_get "runs?set_name=${set_name}&bucket=research-pipeline-output-prod-1" | jq -r '.[-1].db_status'
}

select_runs_to_check () {
    local runs_json_input=$1 && shift
    local version_string=$1 && shift
    local bucket_exclude="research-pipeline"
    # Since Pv5.22 the samples-for-db have two runs (diagnostic and research) we want to ignore the research
    echo "${runs_json_input}" | jq \
      --arg vsn "^${version_string}" \
      --arg buk "^${bucket_exclude}" \
      '[.[] | select(.version//"NA"|match($vsn)) | select(.bucket//"NA"|test($buk)|not)]'
}

get_tumor_samples_from_runs_json () {
    local runs_json=$1 && shift
    echo "${runs_json}" | jq -r '.[].tumor_sample' | sort | uniq
}

main
