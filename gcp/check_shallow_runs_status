#!/usr/bin/env bash

source message_functions || exit 1
source locate_gcp_files || exit 1

yymmdd=$(date +'%y%m%d')
archive_file=$(locate_shallow_processed_runs_log_at_gcp) || die "Unable to locate processed runs log at GCP"
masterlist_file=$(locate_shallow_masterlist_runs_log_at_gcp) || die "Unable to locate masterlist runs log at GCP"
pipeline_version="5.33" # IVDR version of pipeline
tmp_archive_file="/tmp/$(basename "$archive_file").tmp"
tmp_masterlist_file="/tmp/$(basename "$masterlist_file").tmp"
tmp_results_file="/tmp/shallowseq_results_${yymmdd}.tsv.tmp"

info "Starting $(basename "$0")"

# Retrieve archive log
info "Retrieving file ${archive_file}"
gsutil -q cp "${archive_file}" "${tmp_archive_file}" || die "Unable to retrieve file (${archive_file})"

# Retrieve masterlist log
info "Retrieving file ${masterlist_file}"
gsutil -q cp "${masterlist_file}" "${tmp_masterlist_file}" || die "Unable to retrieve file (${masterlist_file})"

# Waiting runs have no version in API so retrieve in second query
info "Searching for shallow runs in API (v${pipeline_version} or higher)"
all_runs=$(hmf_api_get "runs?ini=ShallowSeq.ini&min_version=${pipeline_version}") || die "Unable to get Shallow runs from API"
waiting_runs=$(hmf_api_get "runs?ini=ShallowSeq.ini&status=Waiting") || die "Unable to get Waiting Shallow runs from API"

to_mention=() # gets comment msg appended
to_process=() # gets actual processing commands appended

# Process Waiting runs
while read -r line; do
    run_name=$(echo "${line}" | cut -f1)
    run_status=$(echo "${line}" | cut -f2)
    run_version=$(echo "${line}" | cut -f3)
    run_info="status=${run_status}|version=${run_version}"
    to_mention+=("  WAITING: ${run_name} (${run_info})")
done < <(echo "${waiting_runs}" | jq -rc '.[] | [.set.name,.status,.version] | @tsv')

# Process ShallowSeq runs from current pipeline version
while read -r line; do
    run_name=$(echo "${line}" | cut -f1)
    run_status=$(echo "${line}" | cut -f2)
    run_version=$(echo "${line}" | cut -f3)

    reported=$(grep -c "^${run_name}" "${tmp_archive_file}" | cut -d" " -f1)
    run_info="status=${run_status}|version=${run_version}"

    if [[ "${reported}" -gt 0 ]]; then
        continue
    elif [[ "${run_name}" =~ ShallowTest|cancerPanel|HMFregVAL ]]; then
        continue
    elif [[ "${run_status}" == "Deleted" ]]; then
        continue
    elif [[ "${run_status}" == "Waiting" ]]; then
        to_mention+=("  WAITING: ${run_name} (${run_info})")
    elif [[ "${run_status}" =~ ^(Pending|Processing|Uploading|Downloading)$ ]]; then
        to_mention+=("  PROCESSING: ${run_name} (${run_info})")
    elif [[ "${run_status}" == "Failed" ]]; then
        to_mention+=("  FAILED: ${run_name} (${run_info})")
    elif [[ "${run_status}" =~ ^(Finished|Validated)$ ]]; then
        to_mention+=("  FINISHED: ${run_name} (${run_info})")
        to_process+=("${run_name}")
        echo "${run_name}" >> "${tmp_archive_file}"
    else
        to_mention+=("  UNKNOWN STATUS: ${run_name} (${run_info})")
    fi
done < <(echo "${all_runs}" | jq -rc '.[] | [.set.name,.status,.version] | @tsv')

to_process_count="${#to_process[*]}"
to_mention_count="${#to_mention[*]}"

info "Found ${to_process_count} runs to be processed of ${to_mention_count} to mention"
if [[ "${to_mention_count}" -gt 0 ]]; then
    printf '[INFO] %s\n' "${to_mention[@]}" | sort
fi

if [[ "${to_process_count}" -gt 0 ]]; then
    job_name="${yymmdd}_${USER}_process_shallow_runs_gcp"
    job_file="/data/ops/jobs/${job_name}"
    log_file="/data/ops/logs/${job_name}"

    [[ ! -f "${job_file}" ]] || die "Job file exists (${job_file}). Delete first to allow job file creation!"
    [[ ! -f "${log_file}" ]] || warn "Log file already exists (${log_file})!"

    {
      echo "set -e"
      echo "echo '[INFO] Running perform_shallow_qc_gcp...'"
      echo "  perform_shallow_qc_gcp ${to_process[*]}"
      echo "echo '[INFO] Adding set names to archive log file in bucket...'"
      echo "  gsutil cp '${tmp_archive_file}' '${archive_file}'"
      echo "echo '[INFO] Adding results to masterlist log file in bucket...'"
      echo "  cat '${tmp_results_file}' | tail -n +2 >> '${tmp_masterlist_file}'"
      echo "  gsutil cp '${tmp_masterlist_file}' '${masterlist_file}'"
      echo "echo '[INFO] Printing results"
      echo "  print_shallow_tsv.py '${tmp_results_file}'"
      echo "echo '[INFO] Removing tmp files...'"
      echo "  rm '${tmp_archive_file}'"
      echo "  rm '${tmp_masterlist_file}'"
      echo "  rm '${tmp_results_file}'"
    } > "${job_file}"
    chmod +x "${job_file}"

    info "Check contents of job file:"
    echo "  cat ${job_file}"
    info "Or start processing a total of ${to_process_count} runs with:"
    echo "  nohup ${job_file} > ${log_file} &"
fi

info "Finished with $(basename "$0")"