#!/usr/bin/env bash

source message_functions || exit 1

CRUNCH_PROJECT="hmf-crunch"
OPS_PROJECT="hmf-ops"
DEFAULT_UMBRELLA_SCOPE="crunch"

vm_name=""
vm_project=""

image_name=""
image_project="hmf-build"
image_family="hmf-vm"

zone="europe-west4-a"
machine_type="n1-standard-2"
disk_type="pd-ssd"
disk_size="10G"
network="projects/hmf-vpc-network/global/networks/vpc-network-prod-1"
network_arg=()

preemptible="FALSE"
startup_script="NONE"
umbrella_scope="${DEFAULT_UMBRELLA_SCOPE}"
cost_center=""
do_not_ask=""

print_usage() {
    script=$(basename "$0")
    echo ""
    echo "Description: Creates a VM with appropriate defaults for the HMF environment"
    echo "Usage: ${script} -n <vm-name> [-u <umbrella-scope>] AND/OR [-c <cost-center>] [options]"
    echo "Examples:"
    echo "    ${script} -n ${USER}-test -c DEV-0000"
    echo "    ${script} -n ${USER}-test -u crunch -c experiments"
    echo "    ${script} -n ${USER}-test -u ops"
    echo "    ${script} -n ${USER}-test -u innovation"
    echo ""
    echo "Options:"
    echo "  -i image_name          Image name [default is most recent image of family]"
    echo "  -p image_project       Image project [${image_project}]"
    echo "  -f image_family        Image family [${image_family}]"
    echo "  -m machine_type        VM machine type [${machine_type}]"
    echo "  -s disk_size           VM boot disk size [${disk_size}]"
    echo "  -t disk_type           VM boot disk type [${disk_type}]"
    echo "  -d startup_script      Startup script (as a file) [${startup_script}]"
    echo "  -u umbrella_scope      Can be crunch/ops/innovation/pmc/onboarding and configures accordingly [${umbrella_scope}]"
    echo "  -c cost_center         Track costs under this label [${cost_center}]"
    echo "  -e                     Make VM pre-emptible"
    echo ""
    echo "For configuration see also:"
    echo "  https://cloud.google.com/compute/docs/disks"
    echo "  https://cloud.google.com/compute/docs/machine-types"
    echo "  https://cloud.google.com/compute/docs/instances/create-start-instance"
    echo "  https://cloud.google.com/sdk/gcloud/reference/compute/instances/create"
    echo "  https://cloud.google.com/compute/docs/disks/add-persistent-disk"
    echo ""
    echo "For possible images see also:"
    echo "  gcloud --project ${image_project} compute images list | grep ${image_family}"
    echo "  gcloud --project hmf-pipeline-development compute images list | grep pipeline5-5-29"
    echo "  gcloud --project hmf-pipeline-prod-e45b00f2 compute images describe-from-family pipeline5-5-29 --format 'get(name)'"
    echo "  gcloud --project debian-cloud compute images describe-from-family debian-12 --format 'get(name)'"
    echo ""
    exit 1
}

while getopts ':n:u:p:f:i:m:s:t:d:c:ex' flag; do
    case "${flag}" in
        n) vm_name=${OPTARG} ;;
        u) umbrella_scope=${OPTARG} ;;
        i) image_name=${OPTARG} ;;
        p) image_project=${OPTARG} ;;
        f) image_family=${OPTARG} ;;
        m) machine_type=${OPTARG} ;;
        s) disk_size=${OPTARG} ;;
        t) disk_type=${OPTARG} ;;
        d) startup_script=${OPTARG} ;;
        c) cost_center=${OPTARG} ;;
        e) preemptible="TRUE" ;;
        x) do_not_ask="TRUE" ;;
        *) warn "Incorrect options provided" && print_usage
        exit 1 ;;
    esac
done

if [[ -z "${vm_name}" || $1 == "" || "$1" == "-h" || "$1" == "--help" ]]; then
    print_usage
fi

if [[ "${umbrella_scope}" == "crunch" ]]; then
    [[ -n "${cost_center}" ]] || die "Scope ${umbrella_scope} requires providing a cost-center (see --help)"
    service_account="hmf-crunch@hmf-crunch.iam.gserviceaccount.com"
    vm_project="${CRUNCH_PROJECT}"
    cost_center="${cost_center:-crunch}"
    network_arg=("--network" "${network}" "--subnet" "projects/hmf-vpc-network/regions/europe-west4/subnetworks/vpc-network-subnet-research-prod-1")
elif [[ "${umbrella_scope}" == "ops" ]]; then
    service_account="hmf-ops@hmf-ops.iam.gserviceaccount.com"
    vm_project="${OPS_PROJECT}"
    cost_center="${cost_center:-ops}"
    network_arg=("--network" "${network}" "--subnet" "projects/hmf-vpc-network/regions/europe-west4/subnetworks/vpc-network-subnet-ops-prod-1")
elif [[ "${umbrella_scope}" == "pmc" ]]; then
    service_account="hmf-pmc@hmf-pmc.iam.gserviceaccount.com"
    vm_project="hmf-pmc"
    cost_center="${cost_center:-pmc}"
    network_arg=("--network" "${network}" "--subnet" "projects/hmf-vpc-network/regions/europe-west4/subnetworks/vpc-network-subnet-pmc-prod-1")
elif [[ "${umbrella_scope}" == "onboarding" ]]; then
    service_account="hmf-onboarding@hmf-onboarding.iam.gserviceaccount.com"
    vm_project="hmf-onboarding"
    cost_center="${cost_center:-onboarding}"
elif [[ "${umbrella_scope}" == "innovation" ]]; then
    service_account="hmf-crunch@hmf-crunch.iam.gserviceaccount.com"
    vm_project="${CRUNCH_PROJECT}"
    cost_center="${cost_center:-innovation}"
    network_arg=("--network" "${network}" "--subnet" "projects/hmf-vpc-network/regions/europe-west4/subnetworks/vpc-network-subnet-research-prod-1")
else
    die "Unknown umbrella scope provided [${umbrella_scope}]"
fi

current_project=$(gcloud config get-value project) || die "Unable to get-value project"
if [[ ! "${current_project}" == "${vm_project}" ]]; then
    warn "Request to create VM in project ${vm_project} but current project is ${current_project}"
    warn "Switch project (gcloud config set project ${vm_project}) and try again"
    exit 1
fi

info "Checking availability of VM name (${vm_name})"
gcloud compute instances describe "${vm_name}" > /dev/null 2>&1 && die "A VM with name ${vm_name} already exists in ${vm_project}."

if [[ -z "${image_name}" ]]; then
    info "No specific image requested so searching for latest ${image_family} image"
    image_name=$(gcloud --project="${image_project}" compute images describe-from-family "${image_family}" | grep name | cut -d" " -f2) \
    || die "Unable to describe-from-family from project ${image_project}"
fi

labels="user=${USER},cost_center=${cost_center}"
cmd=("gcloud" "compute" "instances" "create" "${vm_name}")
cmd+=("--image" "${image_name}")
cmd+=("--image-project" "${image_project}")
cmd+=("--machine-type" "${machine_type}")
cmd+=("--boot-disk-type" "${disk_type}")
cmd+=("--boot-disk-size" "${disk_size}")
cmd+=("--scopes" "cloud-platform")
cmd+=("--no-restart-on-failure")
cmd+=("--zone" "${zone}")
cmd+=("--service-account" "${service_account}")
cmd+=("--no-address")
cmd+=("--metadata" "enable-oslogin=TRUE")
cmd+=("--labels" "${labels}")
cmd+=("${network_arg[@]}")

[[ "${preemptible}" == "TRUE" ]] && cmd+=("--preemptible")
[[ "${startup_script}" != "NONE" ]] && cmd+=("--metadata-from-file=startup-script=${startup_script}")

info "Command to be executed: ${cmd[*]}"
info "NOTE: Cost center will be configured to '${cost_center}'"
if [[ "${do_not_ask}" != "TRUE" ]]; then
    info "Press [ENTER] to create VM..."
    read -r -s
fi

info "Start creating VM instance ${vm_name}"
"${cmd[@]}" || die "Something went wrong with VM creation. Please check the gcloud response."
echo ""

info "Useful cmds:"
echo " gcloud compute ssh ${vm_name} --tunnel-through-iap"
echo " gcloud compute instances list --filter='name=(${vm_name})'"
echo " gcloud compute instances stop ${vm_name}"
echo " gcloud compute instances start ${vm_name}"
echo " gcloud compute instances delete --zone ${zone} -q ${vm_name}"
echo " https://console.cloud.google.com/compute/instances?project=${vm_project}"
echo ""