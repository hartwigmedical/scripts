#!/usr/bin/env bash

source locate_files || exit 1
source message_functions || exit 1
source io_functions || exit 1

earliest_date=$1 && shift
patient_ids=$@
working_dir="$(pwd)/delete_actin_clinical_data"

if [[ -z "${earliest_date}" || -z "${patient_ids}" ]]; then
    error "Usage: $0 <earliest date to clean as YYMMDD> <patientID1> [<patientID2>...]"
fi

create_or_cleanup_dir ${working_dir}
cd ${working_dir} || { echo "unable to cd to ${working_dir}"; exit 1; }

clinical_data_feed_bucket="$(locate_actin_clinical_data_feed_bucket)"
reference_string="${clinical_data_feed_bucket}/${earliest_date}/"
info "Will clean directories starting with ${reference_string}"
dirs_to_clean=$(gsutil ls ${clinical_data_feed_bucket} | while read dir; do
   if [[ ! ${dir} < ${reference_string} ]]; then
       echo ${dir}
   fi
done)

patient_id_grep_pattern=$(echo "${patient_ids[@]}" | sed -e 's/ /\\\|/g')
patient_id_sed_pattern=$(echo "(${patient_ids[@]})" | sed -e 's/ /\|/g')

cloud_commands=""

for dir in ${dirs_to_clean}; do
    updated_tsv=0
    info "Making a local copy of ${dir} to ${working_dir}"
    gsutil -m cp -r ${dir} ${working_dir}

    local_dir=$(basename ${dir})
    cd ${local_dir} || { echo "unable to cd to ${local_dir}"; exit 1; }
    backup_dir="../${local_dir}.backup"
    create_or_cleanup_dir ${backup_dir}
    for questionnaire in $(ls | grep "${patient_id_grep_pattern}"); do
        info "Moving ${questionnaire} to ${backup_dir}"
        mv ${questionnaire} ${backup_dir}
        cloud_commands="${cloud_commands}gsutil rm ${dir}/${questionnaire}\n"
    done
    for tsv in $(ls | grep -e '.tsv$'); do
        mv ${tsv} ${backup_dir}
        cat ${backup_dir}/${tsv} | sed -r "/${patient_id_sed_pattern}/d" > ${tsv}
        num_deleted_lines=$(diff ${backup_dir}/${tsv} ${tsv} | wc -l)
        if [[ ${num_deleted_lines} -ne 0 ]]; then
            info "Removed ${num_deleted_lines} lines of patient data from ${working_dir}/${local_dir}/${tsv}"
            updated_tsv=1
        fi
    done
    cd ..
    if [[ ${updated_tsv} -eq 1 ]]; then
        cloud_commands="${cloud_commands}gsutil -m cp -r ${local_dir} ${clinical_data_feed_bucket}/\n"
    fi
done

echo -e "\nRun the following commands to update cloud storage:\n\n${cloud_commands}"
