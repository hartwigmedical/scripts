#!/usr/bin/env bash

source locate_files || exit 1
source message_functions || exit 1

SCRIPT_NAME="$(basename "$0")"

DEFAULT_UPLOAD_DIRECTORY="STAGING/Panel-Reports-To-Check"

print_usage() {
    echo ""
    echo "Description: Upload OncoPanel QC check files to NextCloud. Note: uploads files for all subdirectories of provided directory."
    echo "Usage: ${SCRIPT_NAME} \${qc_check_dir} [\${target_directory}]"
    echo "Examples:"
    echo "  ${SCRIPT_NAME} ~/tmp"
    echo "  ${SCRIPT_NAME} ~/tmp target_directory"
    echo ""
    exit 1
}

main() {
  info "Started ${SCRIPT_NAME}"

  qc_check_dir=$1 && shift
  upload_dir=$1 && shift

  if [[ -z ${qc_check_dir} ]]; then
    info "Missing arguments"
    print_usage
  fi

  if [[ -z ${upload_dir} ]]; then
    info "Use default target directory"
    upload_dir="${DEFAULT_UPLOAD_DIRECTORY}"
  fi

  info "Getting paths to qc check output"
  mapfile -t qc_check_files < <(ls "${qc_check_dir}"/*/*.qc_check.txt) || die "Could not get paths to QC check files"

  info "Getting paths to orange PDFs"
  mapfile -t orange_reports < <(ls "${qc_check_dir}"/*/*.orange.pdf) || die "Could not get paths to Orange PDF reports"

  info "Do sanity checks"
  if [[ ${#qc_check_files[@]} -eq 0 ]]; then
    die "No QC check output files for uploading"
  fi
  if [[ ${#orange_reports[@]} -eq 0 ]]; then
    die "No Orange PDF files for uploading"
  fi

  info "Files to upload to NextCloud to ${upload_dir}:"
  printf '%s\n' "${qc_check_files[@]}" "${orange_reports[@]}"

  info "Press [ENTER] to upload to NextCloud"
  read -r -s

  info "Uploading relevant files from ${qc_check_dir}"
  do_upload_files_to_nextcloud_directory "${upload_dir}" "${qc_check_files[@]}" "${orange_reports[@]}"
  
  info "Finished ${SCRIPT_NAME}"
}

main "$@"