#!/usr/bin/env bash

source message_functions || exit 1
source locate_files || exit 1

print_usage() {
    self=$(basename "$0")
    echo ""
    echo "Description: Runs SAGE append on a specified BAM and VCF in a bucket and uploads the results to a bucket"
    echo "Usage: $self -s \${sample_name} -b \${input_bam} -v \${input_vcf} -r \${ref_genome_fasta} -j \${sage_jar} -w \${working_dir} -o \${output_bucket_dir} <optional arguments>"
    echo "Arguments:"
    echo "  -s sample_name          Sample name to use in output VCF. The file name of this VCF will be \"${sample_name}.coverage.vcf\""
    echo "  -b input_bam            Path of input BAM in GCP bucket."
    echo "  -v input_vcf            Path of input VCF in GCP bucket."
    echo "  -r ref_genome_fasta     Path of reference genome FASTA in GCP bucket."
    echo "  -j sage_jar             Path of SAGE JAR in GCP bucket."
    echo "  -w working_dir          Local working directory for processing."
    echo "  -o output_bucket_dir    Bucket directory to upload output VCF to."
    echo "Optional arguments:"
    echo "  -t threads              Max thread count. Default is all threads."
    echo "Examples:"
    echo "  $self -s 'FAKE1' -b 'gs://path/to/input.bam' -v 'gs://path/to/input.vcf' -r 'gs://path/to/ref.fasta' -j 'gs://path/to/sage.jar' -w '/data/working_dir' -o 'gs://path/to/output/dir'"
    echo "  $self -s 'FAKE2' -b 'gs://path/input.bam' -v 'gs://path/input.vcf' -r 'gs://path/ref.fasta' -j 'gs://path/sage.jar' -w '/data/tmp/FAKE2' -o 'gs://path/output_dir' -t 4"
    echo ""
    exit 1
}

copy_file_gcp() {
  local source=$1 target=$2 threads=$3
  [[ -n ${threads} ]] || die "Not enough args for copy_file_gcp"

  # gcloud CLI handles parallelism internally; --quiet kills interactive prompts
  gcloud --quiet storage cp "${source}" "${target}" \
    --continue-on-error || die "copy ${source} → ${target} failed"
}

main() {
  while getopts ':s:b:v:r:j:w:o:t:' flag; do … done   # same flag parsing

  # sanity-check required args …
  if [[ -z ${threads} ]]; then threads=$(nproc); fi

  info "SAGE-append ► ${sample_name}"
  output_vcf_in_bucket="${output_bucket_dir}/${sample_name}.coverage_per_base.vcf.gz"

  # object-exists test (gcloud storage returns exit-code 0 on hit, 1 on miss) :contentReference[oaicite:2]{index=2}
  gcloud --quiet storage ls "${output_vcf_in_bucket}" >/dev/null 2>&1
  [[ $? -eq 0 ]] && { info "Output already present — skip."; exit 0; }

  ##########################################################################
  # ↓ Everything below just swaps to the new copy_file_gcp helper
  ##########################################################################
  local_input_bam="${working_dir}/$(basename "${input_bam}")"
  [[ -f ${local_input_bam} ]] || {
    info "Download BAM";  copy_file_gcp "${input_bam}" "${local_input_bam}" "${threads}";
  }

  input_bai="${input_bam}.bai"
  local_input_bai="${working_dir}/$(basename "${input_bai}")"
  [[ -f ${local_input_bai} ]] || {
    info "Download BAI";  copy_file_gcp "${input_bai}" "${local_input_bai}" "${threads}";
  }

  local_input_vcf="${working_dir}/$(basename "${input_vcf}")"
  [[ -f ${local_input_vcf} ]] || {
    info "Download VCF";  copy_file_gcp "${input_vcf}" "${local_input_vcf}" "${threads}";
  }

  local_ref_genome_fasta="${working_dir}/$(basename "${ref_genome_fasta}")"
  [[ -f ${local_ref_genome_fasta} ]] || {
    info "Download FASTA"; copy_file_gcp "${ref_genome_fasta}" "${local_ref_genome_fasta}" "${threads}";
  }

  ref_genome_fasta_fai="${ref_genome_fasta}.fai"
  local_ref_genome_fasta_fai="${working_dir}/$(basename "${ref_genome_fasta_fai}")"
  [[ -f ${local_ref_genome_fasta_fai} ]] || {
    info "Download FASTA .fai"; copy_file_gcp "${ref_genome_fasta_fai}" "${local_ref_genome_fasta_fai}" "${threads}";
  }

  ref_genome_fasta_dict="${ref_genome_fasta/.fasta/.dict}"
  ref_genome_fasta_dict="${ref_genome_fasta_dict/.fna/.dict}"
  local_ref_genome_fasta_dict="${working_dir}/$(basename "${ref_genome_fasta_dict}")"
  [[ -f ${local_ref_genome_fasta_dict} ]] || {
    info "Download FASTA .dict"; copy_file_gcp "${ref_genome_fasta_dict}" "${local_ref_genome_fasta_dict}" "${threads}";
  }

  local_sage_jar="${working_dir}/$(basename "${sage_jar}")"
  [[ -f ${local_sage_jar} ]] || {
    info "Download SAGE jar"; copy_file_gcp "${sage_jar}" "${local_sage_jar}" "${threads}";
  }

  local_output_vcf="${working_dir}/${sample_name}.coverage.vcf.gz"
  if [[ ! -f "${local_output_vcf}" ]]; then
    info "Run SAGE append"
    java -Xms4G -Xmx16G -cp "${local_sage_jar}" \
      com.hartwig.hmftools.sage.append.SageAppendApplication \
      -reference "${sample_name}" \
      -reference_bam "${local_input_bam}" \
      -ref_genome "${local_ref_genome_fasta}" \
      -ref_genome_version 38 \
      -input_vcf "${local_input_vcf}" \
      -output_vcf "${local_output_vcf}" \
      -threads "${threads}" \
      || die "SAGE append failed"
  fi

  info "Upload output VCF"
  copy_file_gcp "${local_output_vcf}" "${output_bucket_dir}/$(basename "${local_output_vcf}")" "${threads}"

  info "Clean up"
  rm -f "${local_output_vcf}" "${local_input_bam}" "${local_input_bai}"

  info "Done with ${sample_name}"
}

main "$@" || die "script failed"
