#!/usr/bin/env bash

source message_functions || exit 1
command -v hmf_api_get > /dev/null || die "Dependency hmf_api_get not found"

if [[ -z "$1" || -z "$2" || $1 == "-h" || $1 == "--help" ]]; then
    script=$(basename "$0")
    echo "---"
    echo " Usage: ${script} <barcode> <fastq-dir>"
    echo "        ${script} FR12345678 /path/to/fastq/files/"
    echo "        ${script} FR12345678_{sample-name} gs://cram2fastq/{sample-name}"
    echo "---"
    exit 1
fi

barcode=$1 && shift
fastq_dir=$1 && shift
api_url='http://api.prod-1/hmf/v1'

sample_name=""
sample_id=$(hmf_api_get "samples?barcode=${barcode}" | jq -r '.[-1].id')

if [[ -z "${sample_id}" || "$sample_id" == "null" ]]; then
    die "Barcode not found (${barcode})"
else
    info "Barcode found (sample id = ${sample_id})"
fi

## find all R1 fastq files
if [[ ${fastq_dir} == gs://* ]]; then
    info "FASTQ dir is a bucket ($fastq_dir)"
    R1_fastq_files=$(gsutil ls "${fastq_dir%/}/*_R1_*" | xargs -I% basename % \;)
else
    info "FASTQ dir is a local dir ($fastq_dir)"
    R1_fastq_files=$(find "${fastq_dir}" -name "*_R1_*.fastq.gz" -exec basename {} \;)
fi

## make sure the FASTQ files contain only ONE sample
sample_count=$(echo "${R1_fastq_files}" | cut -d"_" -f1 | sort | uniq | wc -l)
if [[ ${sample_count} -ne 1 ]]; then
    die "FASTQ files in dir should be from one sample (found ${sample_count} samples in dir \"${fastq_dir}\")"
else
    sample_name=$(echo "${R1_fastq_files}" | cut -d"_" -f1 | sort | uniq)
fi

## check R1 and R2 presence -> register pair
info "Starting with sample name:${sample_name} barcode:${barcode} id:${sample_id}"
echo "${R1_fastq_files}" | while read -r R1; do
    R2="${R1//_R1_/_R2_}"
    info "${R1} paired with ${R2}"
    if [[ -z "${R1}" || -z "${R2}" ]]; then
        warn "Somehow R1 found but R2 file does not exist (${R2}) so SKIPPING this pair."
    else
        info "Registering fastq R1/R2 pair (name_r1=${R1})"
        data=$(printf '{"name_r1": "%s", "name_r2": "%s", "bucket": "%s", "sample_id": %s}' "$R1" "$R2" "" "$sample_id" )
        curl --silent --show-error -H "Content-Type: application/json" -H "Accept: application/json" \
          -X POST "${api_url}/fastq" --data "${data}" || die "cURL POST of FASTQ failed"
    fi
done

new_sample_status="Pending_QC"
info "Updating sample status to Pending_QC"
hmf_api_patch -e -c samples -o "$sample_id" -f "status" -v "$new_sample_status"