#!/usr/bin/env bash

source locate_files || exit 1
source message_functions || exit 1

base_run_path=$1
test_run_path=$2

if [[ "$#" -ne 2 ]]; then
    {
    echo "-----"
    echo " Descr: Compares a selection of files from two Somatic pipeline runs"
    echo " Usage: $(basename "$0") \$path_to_base_run \$path_to_test_run"
    echo " Examp: $(basename "$0") /path/to/COLO829v003_v5.8 /path/to/COLO829v003_v5.9"
    echo "        $(basename "$0") /path/to/COLO829v003_v5.8 /path/to/COLO829v003_v5.9 >out.log 2>out.err"
    echo "-----"
    } > /dev/stderr
    exit 1
fi

base_run_path=$(readlink -f "${base_run_path}")
test_run_path=$(readlink -f "${test_run_path}")

base_pip_vsn_file="${base_run_path}/pipeline.version"
test_pip_vsn_file="${test_run_path}/pipeline.version"

base_meta_file="${base_run_path}/metadata.json"
test_meta_file="${test_run_path}/metadata.json"

main () {
    die_unless_dir_exists "${base_run_path}"
    die_unless_dir_exists "${test_run_path}"

    die_unless_file_exists "${base_pip_vsn_file}"
    die_unless_file_exists "${test_pip_vsn_file}"
    die_unless_file_exists "${base_meta_file}"
    die_unless_file_exists "${test_meta_file}"

    base_pip_vsn=$(cat "${base_pip_vsn_file}")
    test_pip_vsn=$(cat "${test_pip_vsn_file}")
    base_ref_sample=$(jq -r '.reference.sampleName' "${base_meta_file}")
    test_ref_sample=$(jq -r '.reference.sampleName' "${test_meta_file}")
    base_tum_sample=$(jq -r '.tumor.sampleName' "${base_meta_file}")
    test_tum_sample=$(jq -r '.tumor.sampleName' "${test_meta_file}")

    tool_dirs_to_check=(amber chord cobalt cuppa gridss gripss_germline gripss_somatic health_checker \
      lilac lilac_slicer linx linx_germline orange pave_germline pave_somatic peach protect purple sage_germline \
      sage_somatic sigs virusbreakend virusintrprtr)

    print_header "Settings"
    info "  BASE DIR: ${base_run_path}"
    info "  TEST DIR: ${test_run_path}"
    info "  BASE version: ${base_pip_vsn}"
    info "  TEST version: ${test_pip_vsn}"
    info "  BASE REF sample: ${base_ref_sample}"
    info "  TEST REF sample: ${test_ref_sample}"
    info "  BASE TUM sample: ${base_tum_sample}"
    info "  TEST TUM sample: ${test_tum_sample}"

    [[ "${base_tum_sample}" == "${test_tum_sample}" ]] || warn "Tum names differ (${base_tum_sample} vs ${test_tum_sample})"
    [[ "${base_ref_sample}" == "${test_ref_sample}" ]] || warn "Ref names differ (${base_ref_sample} vs ${test_ref_sample})"

    base_ref_cram="${base_run_path}/${base_ref_sample}/cram/${base_ref_sample}.cram"
    test_ref_cram="${test_run_path}/${test_ref_sample}/cram/${test_ref_sample}.cram"
    base_tum_cram="${base_run_path}/${base_tum_sample}/cram/${base_tum_sample}.cram"
    test_tum_cram="${test_run_path}/${test_tum_sample}/cram/${test_tum_sample}.cram"

    test_grm_vcf="${test_run_path}/${test_ref_sample}/germline_caller/${test_ref_sample}.germline.vcf.gz"
    base_grm_vcf="${base_run_path}/${base_ref_sample}/germline_caller/${base_ref_sample}.germline.vcf.gz"
    test_chord=$(locate_chord_prediction "${test_run_path}")
    base_chord=$(locate_chord_prediction "${base_run_path}")
    test_som_var=$(locate_purple_somatic_variants "${test_run_path}")
    base_som_var=$(locate_purple_somatic_variants "${base_run_path}")
    test_sv_var=$(locate_purple_structural_variants "${test_run_path}")
    base_sv_var=$(locate_purple_structural_variants "${base_run_path}")
    test_vir_ins=$(locate_virus_annotation_tsv "${test_run_path}")
    base_vir_ins=$(locate_virus_annotation_tsv "${base_run_path}")

    all_cram_files=("${base_ref_cram}" "${test_ref_cram}" "${base_tum_cram}" "${test_tum_cram}")
    all_base_files=("${base_grm_vcf}" "${base_chord}" "${base_vir_ins}" "${base_som_var}" "${base_sv_var}")
    all_test_files=("${test_grm_vcf}" "${test_chord}" "${test_vir_ins}" "${test_som_var}" "${test_sv_var}")

    print_header "REQUIRED FILES EXISTENCE check"
    all_crams_present="TRUE"
    for file in "${all_base_files[@]}"; do
        [[ -f "${file}" ]] || info_and_warn "  File does not exist in base run ($file)"
    done
    for file in "${all_test_files[@]}"; do
        [[ -f "${file}" ]] || info_and_warn "  File does not exist in test run ($file)"
    done

    print_header "BAM/CRAM header check"
    for file in "${all_cram_files[@]}"; do
        if [[ -f "${file}" ]]; then
            info "  OK file found (${file})"
        else
            info_and_warn "  Expected CRAM not found (${file})"
            all_crams_present="FALSE"
        fi
    done
    if [[ "${all_crams_present}" == "FALSE" ]]; then
        info "  NOTE: not all CRAMs were present so skipping CRAM specific checks"
    else
        base_header=$(samtools view -H "${base_tum_cram}" | grep '^@RG')
        test_header=$(samtools view -H "${test_tum_cram}" | grep '^@RG')
        if [[ $(diff <(echo "${base_header}") <(echo "${test_header}") | wc -l) -eq 0 ]]; then
            info "  OK Identical CRAM RG lines in headers"
        else
            info_and_warn "  DIFFERENT CRAM RG lines in headers!"
            echo "# BASE header (${base_tum_cram}):" 1>&2
            echo "${base_header}" 1>&2
            echo "# TEST header (${test_tum_cram}):" 1>&2
            echo "${test_header}" 1>&2
        fi
    fi

    print_header "PER TOOL DIRECTORY check"
    for tool_name in ${tool_dirs_to_check[*]}; do
        check_tool_directory "${tool_name}" "${base_run_path}" "${test_run_path}" "${base_ref_sample}" \
            "${test_ref_sample}" "${base_tum_sample}" "${test_tum_sample}"
    done

    print_header "FILE DIFF check (only for subset of files)"
    # Nothing remaining to check on individual file level.

    print_header "TOOL VERSIONS check"
    check_tool_versions_from_run_log "${base_run_path}" "${test_run_path}"

    print_header "VCF VARIANT COUNT check"
    diff_vcf "${base_som_var}" "${test_som_var}" "INCLUDE_ALL"
    diff_vcf "${base_som_var}" "${test_som_var}" "ONLY_PASS"
    diff_vcf "${base_sv_var}" "${test_sv_var}" "INCLUDE_ALL"
    diff_vcf "${base_sv_var}" "${test_sv_var}" "NO_PON"
    if [[ -f "${base_grm_vcf}" || -f "${test_grm_vcf}" ]]; then
        diff_vcf "${base_grm_vcf}" "${test_grm_vcf}" "ONLY_PASS"
    else
        warn "  NOTE: no GATK VCF's were found, so skipping variant count comparison"
    fi

    print_header "FILE CONTENTS prints"
    info "CHORD file content"
    awk '{print "[INFO]   BASE: "$0}' "${base_chord}"
    awk '{print "[INFO]   TEST: "$0}' "${test_chord}"
    info "VirusInterpreter file content"
    awk '{print "[INFO]   BASE: "$0}' "${base_vir_ins}"
    awk '{print "[INFO]   TEST: "$0}' "${test_vir_ins}"

    info "Finished with $(basename "$0")"
}

diff_vcf () {
    local base_vcf=$1 && shift
    local test_vcf=$1 && shift
    local filter=$1 && shift

    die_unless_file_exists "${base_vcf}"
    die_unless_file_exists "${test_vcf}"

    base_count=0
    test_count=0

    if [[ "${filter}" == "INCLUDE_ALL" ]]; then
        base_count=$(unpigz -c "${base_vcf}" | grep -cv "^#")
        test_count=$(unpigz -c "${test_vcf}" | grep -cv "^#")
    elif [[ "${filter}" == "ONLY_PASS" ]]; then
        base_count=$(unpigz -c "${base_vcf}" | grep -v "^#" | awk '$7 == "PASS"' | wc -l)
        test_count=$(unpigz -c "${test_vcf}" | grep -v "^#" | awk '$7 == "PASS"' | wc -l)
    elif [[ "${filter}" == "NO_PON" ]]; then
        base_count=$(unpigz -c "${base_vcf}" | grep -v "^#" | awk '$7 != "PON"' | wc -l)
        test_count=$(unpigz -c "${test_vcf}" | grep -v "^#" | awk '$7 != "PON"' | wc -l)
    else
        die "Unknown filter (${filter})"
    fi

    if [[ "${base_count}" -eq "${test_count}" ]]; then
        info "  OK Identical variant count (${base_count}) for VCF file ($(basename "${base_vcf}")) using filter ${filter}"
    else
        info_and_warn "  DIFFERENT variant count (${base_count} vs ${test_count}) for VCF file ($(basename "${base_vcf}")) using filter ${filter}"
    fi
}

diff_file () {
    local file_suffix=$1 && shift

    # prefix name with * to allow match in case of run path is absolute
    base_file_path=$(find "${base_run_path}" -wholename "*${file_suffix}")
    test_file_path=$(find "${test_run_path}" -wholename "*${file_suffix}")
    [[ -n "${base_file_path}" ]] || die "No base file provided for diff (${base_file_path} vs ${test_file_path})"
    [[ -n "${test_file_path}" ]] || die "No test file provided for diff (${base_file_path} vs ${test_file_path})"

    diff_result=$(diff "$base_file_path" "$test_file_path" | wc -l)
    if [[ "$diff_result" == 0 ]]; then
        info "  OK Identical diff for file (${file_suffix})"
    else
        info_and_warn "  DIFFERENT content found for file (${file_suffix})"
        warn "    BASE file: ${base_file_path}"
        warn "    TEST file: ${test_file_path}"
    fi
}

check_tool_directory () {
    local tool_name=$1 && shift
    local base_run_path=$1 && shift
    local test_run_path=$1 && shift
    local base_ref_sample=$1 && shift
    local test_ref_sample=$1 && shift
    local base_tum_sample=$1 && shift
    local test_tum_sample=$1 && shift

    info "Checking directory ${tool_name}"

    base_tool_path="${base_run_path}/${tool_name}"
    test_tool_path="${test_run_path}/${tool_name}"

    if [[ ! -d "${base_tool_path}" ]]; then
        info_and_warn "  Directory does not exist so cannot compare (${base_tool_path})"
        return
    elif [[ ! -d "${test_tool_path}" ]]; then
        info_and_warn "  Directory does not exist so cannot compare (${test_tool_path})"
        return
    fi

    # expect file/dir count to be equal excluding potential symlinks (-not -type l) and backup files (*.bak)
    base_file_count=$(find -L "${base_tool_path}" -mindepth 1 -maxdepth 1 -not -type l -not -name "*.bak" | wc -l)
    test_file_count=$(find -L "${test_tool_path}" -mindepth 1 -maxdepth 1 -not -type l -not -name "*.bak" | wc -l)
    if [[ ${base_file_count} -ne ${test_file_count} ]]; then
        info_and_warn "  DIFFERENT file count (${base_file_count} vs ${test_file_count}) for tool directory (${tool_name})"
    else
        info "  OK Identical file count (${base_file_count}) for tool directory (${tool_name})"
    fi

    find "${base_tool_path}" -mindepth 1 -maxdepth 1 -type f \
        -not -name "*.cram" -not -name "*.crai" -not -name "*.bam" -not -name "*.bai" \
        -not -name "*.sh" -not -name "*.log" -not -name "*.bak" -not -name "*.vcf" -not -name "*.tbi" -not -name "*.gz" \
        -not -name "*.png" -not -name "*.jpg" -not -name "*.svg" -not -name "*.pdf" \
    | while read -r base_file_path; do
        file_name=$(basename "${base_file_path}");

        # Most files contain the sample name in file name
        file_name="${file_name//${base_tum_sample}/${test_tum_sample}}"
        file_name="${file_name//${base_ref_sample}/${test_ref_sample}}"

        file_path="${tool_name}/${file_name}"
        test_file_path="${test_run_path}/${file_path}"

        if [[ ! -f ${base_file_path} ]]; then
            info_and_warn "  Cannot compare file since does not exist (${base_file_path})"
        elif [[ ! -f ${test_file_path} ]]; then
            info_and_warn "  Cannot compare file since does not exist (${test_file_path})"
        else
            base_count=$(wc -l "${base_file_path}" | cut -d" " -f1)
            test_count=$(wc -l "${test_file_path}" | cut -d" " -f1)
            if [[ ${base_count} -eq ${test_count} ]]; then
                info "  OK Identical line count (${base_count}) for file (${file_path})"
            else
                info_and_warn "  DIFFERENT line count (${base_count} vs ${test_count}) for file (${file_path})"
            fi
        fi
    done
}

check_tool_versions_from_run_log () {
    local base_run_path=$1 && shift
    local test_run_path=$1 && shift
    declare -A tool_names
    declare -A tool_versions

    while read -r name_vsn_str; do
        tool_name=$(echo "${name_vsn_str}" | cut -d":" -f1)
        tool_vsn=$(echo "${name_vsn_str}" | cut -d":" -f2)
        tool_names[${tool_name}]="true"
        tool_versions["${tool_name}_BASE"]="${tool_vsn}"
    done < <(awk '/Versions of tools/,/\]/' "${base_run_path}/run.log" | awk 'NR>2 {print last} {last=$0}' | cut -d" " -f5,6 | sed 's/ //g')

    # Pv5.33 changes the run.log conventions (HMF tool versions)
    while read -r name_vsn_str; do
        tool_name=$(echo "${name_vsn_str}" | cut -d":" -f1)
        tool_vsn=$(echo "${name_vsn_str}" | cut -d":" -f2)
        tool_names["${tool_name}"]="true"
        tool_versions["${tool_name}_TEST"]="${tool_vsn}"
    done < <(awk '/HMF tool versions:/,/\]/' "${test_run_path}/run.log" | awk 'NR>2 {print last} {last=$0}' | cut -d" " -f5,6 | sed 's/ //g')

    for tool_name in "${!tool_names[@]}"; do
        base_vsn=${tool_versions["${tool_name}_BASE"]}
        test_vsn=${tool_versions["${tool_name}_TEST"]}
        if [[ "${base_vsn}" == "${test_vsn}" ]]; then
            info "  OK identical tool version for tool ${tool_name} (${base_vsn})"
        elif [[ "${base_vsn}" == "" ]]; then
            info_and_warn "  NEW tool ${tool_name} v${test_vsn} found"
        else
            info_and_warn "  DIFFERENT version for tool ${tool_name} v${base_vsn} -> v${test_vsn}"
        fi
    done
}

die_unless_dir_exists () {
    dir_path=$1 && shift
    [[ -d "${dir_path}" ]] || die "Directory not found (${dir_path})"
}

die_unless_file_exists () {
    file_path=$1 && shift
    [[ -f "${file_path}" ]] || die "File not found (${file_path})"
}

print_header () {
    info "===== $1 ====="
}

main