#!/usr/bin/env bash

source gcp_functions || exit 1
source message_functions || exit 1
source locate_files || exit 1
source locate_gcp_files || exit 1

usage() {
    echo "---"
    echo " Descr: "
    echo " Notes: Test mode (-t) allows for multiple 'prefixes', Normal mode only uses first one"
    echo " Usage: $(basename $0) [-t] -p <string>"
    echo " Exmpl: $(basename $0) -p 250812"
    echo " Exmpl: $(basename $0) -t -p NO25-0156 -p NO25-0157"
    echo "---"
    exit 1
}

while getopts "tp:h:" opt; do
    case "${opt}" in
        p)
            prefix+=("${OPTARG}")
            ;;
        t)
            t="true"
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

curr_date=$(date +'%y%m%d')

if [ -n "${t}" ]; then # Testing case
    local_sheets_dir="/data/tmp/registration_test/samplesheet"
    sheets_bucket="/volume1/worksheets"
    for sheet in "${prefix[@]}"
    do
      copy_file_from_nas "${sheets_bucket}/${sheet}/SampleSheet.csv" "${local_sheets_dir}/${sheet}_SampleSheet.csv" || warn "Could not get SampleSheet for ${sheet} from NAS"
    done

    SHEETS_LOC="/data/tmp/registration_test/samplesheet"
    #JSONS_LOC="/data/tmp/registration_test/json"
    JSONS_LOC=$(locate_sample_registration_unregistered_jsons_dir)
    LOGS_LOC="/data/tmp/registration_test/log"
    create_log="${LOGS_LOC}/${curr_date}_create_jsons_for_${prefix}"
    sources=$(ls "${local_sheets_dir}"/*_SampleSheet.csv)
    for sheet in ${sources}
    do
        fetch_jsons_from_samplesheet -s ${sheet} -j "${JSONS_LOC}/"
    done > ${create_log}

    cat "${create_log}"

    rm /data/tmp/registration_test/*/*
else # Normal case
    switch_to_hmf_ops_service_account || die "Could not switch to hmf ops"
    local_sheets_dir=$(locate_samplesheets_dir) || die "Could not find the samplesheets dir"
    sheets_bucket=$(locate_samplesheets_at_gcp) || die "Could not find samplesheets bucket path"
    relevant_sheets_in_bucket=$(gsutil ls "${sheets_bucket}/${prefix}*") || die "Could not access samplesheet bucket"
    for sheet_in_bucket in ${relevant_sheets_in_bucket}; do
      sheet="${sheet_in_bucket##*/}"
      gsutil cp "${sheet_in_bucket}" "${local_sheets_dir}/${sheet}" || warn "Could not get SampleSheet for ${sheet} from GCP"
    done

    SHEETS_LOC=$(locate_samplesheets_dir) || die "Could not find local samplesheets dir path"
    JSONS_LOC=$(locate_sample_registration_unregistered_jsons_dir) || die "Could not find the unregistered-jsons dir"
    LOGS_LOC=$(locate_sample_registration_logs_dir) || die "Could not find local registration logs dir path"

    preexisting_json_count=$(find "${JSONS_LOC}" -maxdepth 1 -name "*.json" | wc -l)
    if [[ ${preexisting_json_count} -gt 0 ]]; then
        warn "Pre existing JSON's found in unregistered json dir. Investigate them.: dir=${JSONS_LOC}"
        warn "Move or remove them if necessary. If not, continue with the following command:"
        info " fetch_jsons_from_samplesheet_with_prefix_from_bucket -p \"${prefix}\""
    else
        create_log="${LOGS_LOC}/${curr_date}_create_jsons_for_${prefix}"
        sources=$(ls "${SHEETS_LOC}/${prefix}"*SampleSheet*)
        for sheet in ${sources}
        do
            fetch_jsons_from_samplesheet -s ${sheet} -j "${JSONS_LOC}/"
        done > ${create_log}

        rm "${JSONS_LOC}/null.json"

        cat "${create_log}"

        register_log="${LOGS_LOC}/${curr_date}_register_sets_for_${prefix}_flowcells"
        info "TODO: Check one json per entity to see if settings are conform agreement with requester and entity exists in API"
        info "TODO: If all OK you can register them in API with:"
        info " nohup register_jsons_through_lama > ${register_log} &"
        info ""
        info "TODO: Afterwards you can check the registration success rate with:"
        info " echo \"Amount IN: \"\$( ls ${JSONS_LOC}/*json | wc -l); echo \"Amount OK: \"\$( cat ${register_log} | grep created | wc -l) "
        info ""
        info "TODO: If successful, clean up logs and jsons with:"
        info " move_registration_jsons_and_logs ${prefix} ${curr_date}"
    fi
fi