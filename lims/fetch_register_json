#!/usr/bin/env bash

source message_functions || exit 1
source locate_files || exit 1

# CLI
usage() {
    echo "---"
    echo " Descr: Fetch sample/run register json from LAMA for Hartwig API"
    echo " Usage: $(basename $0) [-f <true|false>] [-o <string>] -b <string> "
    echo " Exmpl: $(basename $0) -b FR12345678 -o ./"
    echo "---"
    exit 1
}

while getopts ":f:b:o:h:" opt; do
    case "${opt}" in
        f)
            f=${OPTARG}
            ;;
        b)
            b=${OPTARG}
            ;;
        o)
            o=${OPTARG}
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

check="true"
force="false"
out_path=$(locate_sample_registration_unregistered_jsons_dir) || die "Could not find the unregistered-jsons dir"

if [ -z "${b}" ]; then
    usage
fi
barcode=${b}

if [ -n "${f}" ]; then
    force=${f}
fi

if [ -n "${o}"  ]; then
    if [ -d "${o}" ]; then
        out_path=${o}
    else
        die "Invalid path ${o}"
    fi
fi


# Standard
info "Fetching data for ${barcode}"
ask_request_body=$(echo -e "{\"isolationBarcode\": \"${barcode}\"}")
register_json=$(curl -X 'POST' 'http://lama.prod-1/api/registration/hartwig-api/show' \
                  -H 'accept: */*' \
                  -H 'Content-Type: application/json' \
                  -d "${ask_request_body}") || die "Could not fetch registration json for ${barcode}"
setname=$(echo "${register_json}" | jq -r '.sampleSetName')


# API checks
info "Check Hartwig API samples on ${barcode}"
hmf_api_sample_json=$(hmf_api_get "samples?barcode=${barcode}")
if [[ ! ${hmf_api_sample_json} == "[]" ]]; then
    status=$(echo "${hmf_api_sample_json}" | jq '.[].status')
    if [[ ${status} == "Deleted" ]]; then
        c2f_override="true"
        warn "The sample ${barcode} has the DELETED status in the Hartwig API, set cram2fastq. Check if correct"
    else
        warn "The sample ${barcode} already exist with status ${status}"
    fi
fi

info "Check Hartwig API runs on ${barcode}"
setname_without_date=$(echo "${setname}" | cut -d_ -f2-)
hmf_api_run_json=$(hmf_api_get "runs?context=DIAGNOSTIC&set_name_contains=${setname_without_date}")
run_count=$(echo ${hmf_api_run_json} | jq 'map(select(.status != "Invalidated")) | length' | tr -d '"\n')
if [[ ${run_count} > 0 ]]; then
    check="false"
    warn "There already exist runs for ${barcode}: ${setname_without_date}"
fi

# VHIO checks
submission=$(echo "${register_json}" | jq -r '.submission')
tum_reporting_id=$(echo "${register_json}" | jq -r '.sample.reportingId')
ini=$(echo "${register_json}" | jq -r '.ini')
if [[ ${ini} == "RNA.ini" && ${submission} =~ ^Diagnostic* && ${tum_reporting_id} =~ ^CUP*|^TIL*|^VDH*|^BRIOME* ]]; then
     ini_override="FASTQ.ini"
     warn "RNA sample from VHIO (${barcode}) detected, changed to FASTQ output. Remember to send data out after sequencing"
elif [[ ${ini} == "Somatic.ini" && ${submission} =~ ^Diagnostic* && ${tum_reporting_id} =~ ^CUP*|^BRIOME* && ${run_count} == 0 ]]; then
     ini_override="ShallowSeq.ini"
     warn "Sample from VHIO (${barcode}) detected with Somatic output, but no runs. Changed to ShallowSeq output"
fi

# HSS checks


# Write request body
request_body="\"isolationBarcode\": \"${barcode}\""
if [ ! -z "${c2f_override}" ]; then
    request_body="${request_body},\n\"cram2fastq\": \"${c2f_override}\""
fi
if [ ! -z "${ini_override}" ]; then
     request_body="${request_body},\n\"iniOverride\": \"${ini_override}\""
fi
request_body="{${request_body}}"


# Check force option
if [[ ${force} == "true" ]]; then
   warn "Force option used, overwriting any possible issues to write request body for registration"
   check="true"
fi


# Output request body (or not)
if [[ ${check} == "true" ]]; then
    info "Writing registration request json for LAMA to ${out_path}${setname}.json"
    echo -e ${request_body} > "${out_path}${setname}.json"
else
    die "Not writing registration request json for barcode ${barcode}"
fi