#!/usr/bin/env bash

source message_functions || exit 1

out_dir=$1 && shift # prod or pilot lims dir

if [[ -z "${out_dir}" ]]; then
    echo "Usage: $(basename "$0") /path/to/out/dir"
    echo "   Eg: $(basename "$0") /data/ops/lims/pilot"
    exit 1
fi

LAB_DIR="${out_dir}/lab_files"
DAY_DIR="${LAB_DIR}/$(date '+%y%m%d')"
TMP_DIR="${DAY_DIR}/tmp"
SYM_DIR="${LAB_DIR}/latest"
NAS_DIR="/volume1/machines/00 LIMS"

FOR_001_FILE="HMF-FOR-001 Received samples 2025 v5.16.xlsm" # Update once versions are known
FOR_002_FILE="HMF-FOR-002 Sample in process 2025 v4.9.xlsm" # Update once versions are known

FOR_001_FILE_2024="HMF-FOR-001 Received samples 2024 v5.15.xlsm"
FOR_001_FILE_2023="HMF-FOR-001 Received Samples 2023 v5.14.xlsx" # Remove once not needed any longer

FOR_002_FILE_2024="HMF-FOR-002 Sample in process 2024 v4.8.xlsm"
FOR_002_FILE_2023="HMF-FOR-002 Sample in process 2023 v4.7.xlsx" # Remove once not needed any longer

NAS_FILES=(
  "${NAS_DIR}/${FOR_001_FILE}"
  "${NAS_DIR}/${FOR_001_FILE_2024}"
  "${NAS_DIR}/${FOR_001_FILE_2023}" # Remove once not needed any longer
  "${NAS_DIR}/${FOR_002_FILE}"
  "${NAS_DIR}/${FOR_002_FILE_2024}"
  "${NAS_DIR}/${FOR_002_FILE_2023}" # Remove once not needed any longer
)

LAMA_BUCKET="lama-export"

LAMA_FILES=(
  "gs://${LAMA_BUCKET}/BiopsySites.json"
  "gs://${LAMA_BUCKET}/ContactGroups.json"
  "gs://${LAMA_BUCKET}/Contacts.json"
  "gs://${LAMA_BUCKET}/Contracts.json"
  "gs://${LAMA_BUCKET}/Hospitals.json"
  "gs://${LAMA_BUCKET}/Isolations.json"
  "gs://${LAMA_BUCKET}/LibraryPreparations.json"
  "gs://${LAMA_BUCKET}/Patients.json"
  "gs://${LAMA_BUCKET}/Statuses.json"
  "gs://${LAMA_BUCKET}/TumorTypes.json"
)

main() {
    info "Starting with $(basename $0)"

    dir_exists_and_is_writable "${out_dir}"
    dir_exists_and_is_writable "${LAB_DIR}"
    dir_exists_and_is_writable "${SYM_DIR}"

    info "Working dir set to ${DAY_DIR}"
    mkdir -p "${DAY_DIR}"
    mkdir -p "${TMP_DIR}"

    info "Retrieving input files from NAS (${NAS_DIR})"
    for nas_file_path in "${NAS_FILES[@]}"; do
      retrieve_file_from_nas "$nas_file_path" "${TMP_DIR}"
    done

    info "Retrieving LAMA input files from bucket (gs://${LAMA_BUCKET})"
    gsutil -m cp "${LAMA_FILES[@]}" "${TMP_DIR}" || die "Error during LAMA file retrieval"

    for001_source="${TMP_DIR}/${FOR_001_FILE}"
    for002_source="${TMP_DIR}/${FOR_002_FILE}"

    for001_samp_txt="${DAY_DIR}/for001_samples.tsv"
    for001_subm_txt="${DAY_DIR}/for001_submissions.tsv"
    for001_cont_txt="${DAY_DIR}/for001_contacts.tsv"
    for002_proc_txt="${DAY_DIR}/for002_processing.tsv"

    info "Converting input files to text formats"
    excel_sheet_to_tsv "${for001_source}" "${for001_subm_txt}" "1" "5"
    excel_sheet_to_tsv "${for001_source}" "${for001_samp_txt}" "2" "2"
    excel_sheet_to_tsv "${for001_source}" "${for001_cont_txt}" "3" "2"
    excel_sheet_to_tsv "${for002_source}" "${for002_proc_txt}" "1" "5"

    # We need to support the files from previous year until lab team has finished with updates
    info "Converting input files to text formats for previous year 2024"
    for001_source_2024="${TMP_DIR}/${FOR_001_FILE_2024}"
    for002_source_2024="${TMP_DIR}/${FOR_002_FILE_2024}"
    for001_samp_txt_2024="${DAY_DIR}/2024_for001_samples.tsv"
    for001_subm_txt_2024="${DAY_DIR}/2024_for001_submissions.tsv"
    for002_proc_txt_2024="${DAY_DIR}/2024_for002_processing.tsv"
    excel_sheet_to_tsv "${for001_source_2024}" "${for001_subm_txt_2024}" "1" "5"
    excel_sheet_to_tsv "${for001_source_2024}" "${for001_samp_txt_2024}" "2" "2"
    excel_sheet_to_tsv "${for002_source_2024}" "${for002_proc_txt_2024}" "1" "5"

    info "Converting input files to text formats for previous year 2023"
    for001_source_2023="${TMP_DIR}/${FOR_001_FILE_2023}"
    for002_source_2023="${TMP_DIR}/${FOR_002_FILE_2023}"
    for001_samp_txt_2023="${DAY_DIR}/2023_for001_samples.tsv"
    for001_subm_txt_2023="${DAY_DIR}/2023_for001_submissions.tsv"
    for002_proc_txt_2023="${DAY_DIR}/2023_for002_processing.tsv"
    excel_sheet_to_tsv "${for001_source_2023}" "${for001_subm_txt_2023}" "1" "5"
    excel_sheet_to_tsv "${for001_source_2023}" "${for001_samp_txt_2023}" "2" "2"
    excel_sheet_to_tsv "${for002_source_2023}" "${for002_proc_txt_2023}" "1" "5"

    info "Symlinking to latest dir (${SYM_DIR})"
    find "${DAY_DIR}" -name "*.tsv" -or -name "*.csv" -or -name "*.json" | while read -r txt_file; do
      symlink_to_latest "${txt_file}" "$SYM_DIR"
    done

    info "Finished with $(basename $0)"
}

excel_sheet_to_tsv() {
    local input_excel_file=$1 && shift
    local output_tsv=$1 && shift
    local sheet_index=$1 && shift
    local first_row_index=$1 && shift
    local excel_name=""
    excel_name=$(basename "${input_excel_file}")

    info "  Converting file '${excel_name}' sheet ${sheet_index} with row ${first_row_index} as header (${output_tsv})"
    xlsx2csv -d "\t" "${input_excel_file}" -s "${sheet_index}" | tail -n +"${first_row_index}" > "${output_tsv}" \
      || die "Excel conversion to tsv FAILED (${sheet_index})"
}

symlink_to_latest() {
    local source_path=$1 && shift
    local target_dir=$1 && shift
    local target_path=""
    target_path="${target_dir}/$(basename "${source_path}")"
    ln -sfn "${source_path}" "${target_path}" || die "Symlink FAILED (${source_path})"
}

retrieve_file_from_nas() {
    local source_path=$1 && shift
    local target_dir=$1 && shift
    copy_file_from_nas "${source_path}" "${target_dir}" || die "Copying from NAS FAILED (${source_path})"
}

dir_exists_and_is_writable() {
    dir_to_check=$1 && shift
    [[ -d "${dir_to_check}" ]] || die "Dir does not exist (${dir_to_check})"
    [[ -w "${dir_to_check}" ]] || die "Dir is not writable (${dir_to_check})"
}

main