#!/usr/bin/env bash

source message_functions || exit 1

command -v yq >/dev/null 2>&1 || die "Missing dependency yq"

groups=(
"2faexempt"
"actin"
"data-access-monitor"
"data-exchanger"
"data-exchanger-australia"
"data-requests"
"diagnostic-silo-support"
"emc-production-support"
"emc-sql-users"
"linkage-silo-support"
"hmftools_users"
"onboarding"
"operations"
"pipeline-developer"
"portal-support"
"privileged"
"production-support"
"report-manager"
"researcher"
"secret-manager"
)

if [[ -n $1 ]]; then
    groups=("$1")
fi

declare -A membersByGroup
declare -A groupsByMember

info "Gathering members of all ${#groups[@]} GCP groups known to this script"
for group in "${groups[@]}"; do
    group_email="${group}@hartwigmedicalfoundation.nl"
    info "  Processing group ${group_email}"
    members=$(gcloud identity groups memberships list --group-email "${group_email}" | yq -c)
    members_csv=$(jq -sr '[.[].preferredMemberKey.id|split("@")[0]] | sort | join(",")' <<< "${members}")
    membersByGroup[$group]="$members_csv"
    while read -r member; do
        existing_groups=${groupsByMember[$member]}
        if [[ "${existing_groups}" != "" ]]; then
            groupsByMember["$member"]="${existing_groups},${group}"
        else
            groupsByMember["$member"]="${group}"
        fi
    done < <(jq -sr '.[].preferredMemberKey.id|sub("@hartwigmedicalfoundation.nl";"";"i")' <<< "${members}")
done

info "Printing members BY GROUP:"
for group in "${!membersByGroup[@]}"; do
    printf "%s: %s\n" "${group}" "${membersByGroup[$group]}"
done | sort

info "Printing groups BY MEMBER:"
for member in "${!groupsByMember[@]}"; do
    printf "%s: %s\n" "${member}" "${groupsByMember[$member]}"
done | sort