#!/usr/bin/env bash

source message_functions || exit 1

command -v jq >/dev/null 2>&1 || die "Missing dependency yq"

PROJECT="hmf-secrets"

info "Collecting names of all secrets in project [${PROJECT}]"
info "This takes a while as we need to visit each secret one by one (found no way to collect all at once yet)"
mapfile -t secretNames < <(gcloud --project "${PROJECT}" secrets list --format "value(NAME)")

info "Checking members per secret"
declare -A members_by_secret
declare -A secrets_by_member

for secret in "${secretNames[@]}"; do
    info "  Processing secret ${secret}"
    iam_json=$(gcloud --project "${PROJECT}" secrets get-iam-policy "${secret}" --format json)
    bindings=$(jq -c '.bindings' <<< "${iam_json}")
    if [[ "${bindings}" == "null" ]]; then continue; fi
    members=$(jq -c '[.[].members[]|sub("user:";"";"i")|sub("serviceAccount:";"";"i")|sub("group:";"";"i")|sub("@hartwigmedicalfoundation.nl";"";"i")|sub(".iam.gserviceaccount.com";"";"i")]' <<< "${bindings}")
    members_csv=$(jq -r '.|join(",")' <<< "${members}")
    members_by_secret[$secret]="$members_csv"
    if [[ "${members_csv}" == "" ]]; then continue; fi
    while read -r member; do
        existing_secrets=${secrets_by_member[$member]}
        if [[ "${existing_secrets}" != "" ]]; then
            secrets_by_member["$member"]="${existing_secrets},${secret}"
        else
            secrets_by_member["$member"]="${secret}"
        fi
    done < <(jq -r '.[]' <<< "${members}")
done

info "Printing members BY SECRET:"
for secret in "${!members_by_secret[@]}"; do
    printf "SECRET\t%s\t%s\n" "${secret}" "${members_by_secret[${secret}]}"
done

info "Printing secrets BY MEMBER:"
for member in "${!secrets_by_member[@]}"; do
    printf "MEMBER\t%s\t%s\n" "${member}" "${secrets_by_member[$member]}"
done