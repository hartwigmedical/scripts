#!/usr/bin/env bash

set -e

source message_functions || exit 1

ORGANIZATION_ID="478829257309"

account_email=$1
scope=${2:-organizations/${ORGANIZATION_ID}} # can also be eg projects/hmf-secrets

[[ -n "${account_email}" ]] || die "Provide email address of account to check (and optionally a specific project)"
[[ "${account_email}" =~ .*@.*\..* ]] || die "Input does not look like an email address [${account_email}]"

function main() {
    projects=$(gcloud projects list --filter "parent.id=${ORGANIZATION_ID} AND parent.type=organization" --format=json)
    declare -A projectNumberToId
    while read -r line; do
        project_number=$(cut -f1 <<< "${line}")
        project_id=$(cut -f2 <<< "${line}")
        projectNumberToId["${project_number}"]="${project_id}"
    done < <(jq -r '.[] | [.projectNumber,.projectId] | @tsv' <<< "${projects}")
    list_policies_in_scope "${account_email}" "${scope}"
}

function list_policies_in_scope() {
    local account_email=$1 && shift
    local scope=$1 && shift
    info "Checking iam policies for principal [${account_email}] in scope [${scope}]"
    policies=$(gcloud asset search-all-iam-policies --scope="${scope}" --query="policy:${account_email}" --order-by=project --format=json)
    while read -r line; do
        project_number=$(cut -f1 <<< "${line}" | cut -d"/" -f2)
        project_id=${projectNumberToId["${project_number}"]}
        resource=$(cut -f2 <<< "${line}")
        roles=$(cut -f3- <<< "${line}")
        printf "%s\t%s\t%s\t%s\n" "${account_email}" "${project_id}" "${resource}" "${roles}"
    done < <(jq -r '.[] | [.project, .resource, ([.policy.bindings[].role]|join(","))] | @tsv' <<< "${policies}")
}

function get_projects() {
    gcloud projects list --filter "parent.id=${ORGANIZATION_ID} AND parent.type=organization" --format json | jq -r '.[].projectId'
}

main