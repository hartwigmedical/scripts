#!/usr/bin/env bash

set -e

source message_functions || exit 1

ORGANIZATION_ID="478829257309"

account_email=$1
project_id=$2

[[ -n "${account_email}" ]] || die "Provide email address of account to check (and optionally a specific project)"
[[ "${account_email}" =~ .*@.*\..* ]] || die "Input does not look like an email address [${account_email}]"

function main() {
    if [[ -n "${project_id}" ]]; then
        info "Project ID provided so checking only this one [${project_id}]"
        policies "$project_id" "$account_email"
    else
        info "No project ID provided so checking all known projects of organization [${ORGANIZATION_ID}]"
        info "An error is returned for every project the caller account has no searchAllIamPolicies permission for"
        mapfile -t projects < <(get_projects)
        for project_id in "${projects[@]}"; do
            policies "$project_id" "$account_email"
        done
    fi
}

function policies() {
    local project_id=$1 && shift
    local account_email=$1 && shift
    info "Checking iam policies for [${account_email}] in project [${project_id}]"
    if [[ "${project_id}" == "hmf-backups-development" ]]; then
        warn "Project not yet supported in policy check [${project_id}]"
        return 0
    fi
    gcloud asset search-all-iam-policies --scope="projects/${project_id}" --query="policy:${account_email}" --format=json \
          | jq --arg u "${account_email}" --arg p "${project_id}" -r '.[] | [$u, $p, .policy.bindings[].role,.resource] | @tsv'
}

function get_projects() {
    gcloud projects list --filter "parent.id=${ORGANIZATION_ID} AND parent.type=organization" --format json | jq -r '.[].projectId'
}

main