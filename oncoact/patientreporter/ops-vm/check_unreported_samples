#!/usr/bin/env bash

source message_functions || exit 1

MIN_ARRIVAL_DATE="2021-01-01"
LAMA_API_URL="http://lama.prod-1/api"
REPORT_SHARED_TSV="/data/ops/lims/prod/sharing_db_generated.tsv"
UNREPORTABLE_TSV="/data/ops/lims/prod/samples_without_pdf_report.tsv"
#IN_PROCESS_STATUS="PROCESSING|PENDING|FAILED"

function main(){
    info "Retrieving samples from LAMA with arrival date [${MIN_ARRIVAL_DATE}] or later"
    info "  LAMA url: ${LAMA_API_URL}"
    samples=$(curl --silent "${LAMA_API_URL}/tumor-samples?start-date=${MIN_ARRIVAL_DATE}")
    sample_count=$(jq 'length' <<< "${samples}")
    info "Starting unreported check for ${sample_count} tumor-samples from LAMA"
    while read -r sample_info; do
        sampleId=$(jq -r '.sampleId' <<< "${sample_info}")
        if [[ "${sampleId}" =~ T0$ ]]; then
            info "Ignoring sample ${sampleId} because is T0"
            continue
        fi
        report_count=$(grep -cE "${sampleId}\W+" "${REPORT_SHARED_TSV}")
        if [[ "${report_count}" -lt 1 ]]; then
            check_one_unreported_sample "${sampleId}"
        fi
    done < <(jq -c '.[]' <<< "${samples}" )
    info "Finished with unreported check"
}

function check_one_unreported_sample(){
    local sampleId=$1 && shift

    api_info=$(hmf_api_get "samples?name=${sampleId}&type=tumor")
    api_sample_status=$(jq -cr '.[-1].status' <<< "${api_info}")
    lama_all_statusus=$(curl --silent "${LAMA_API_URL}/statuses/sample-id/${sampleId}")

    # LAMA API has no filter on type currently so need to use jq for now
    lama_status=$(jq '[.[] | select(.type|test("^TUMOR_TISSUE|TUMOR_DNA_EXTERNALLY_ISOLATED$"))]' <<< "${lama_all_statusus}")
    additional_barcodes=$(jq -cr '[.[] | .sampleBarcode, .isolationBarcodes[] ] | join(",")' <<< "${lama_status}")
    info="${sampleId}=${additional_barcodes}"
    total_count=$(jq 'length' <<< "${lama_status}")
    unreportable_count=$(grep -cE "^${sampleId}$" "${UNREPORTABLE_TSV}")

    # Perform the checks
    if [[ "${unreportable_count}" -gt 0 ]]; then
        info "SKIPPING: UNREPORTABLE sample [${info}]"
    elif [[ $(all_isolations_are_on_storage "${lama_status}") == "true" ]]; then
        info "SKIPPING: STORAGE status for all isolations [${info}]"
    elif [[ $(all_librarypreps_are_on_storage "${lama_status}") == "true" ]]; then
        info "SKIPPING: STORAGE status for all library preps [${info}]"
    elif [[ $(has_revoked_isolation "${lama_status}") == "true" ]]; then
        info "SKIPPING: REVOKED isolation [${info}]"
    elif [[ $(has_revoked_libraryprep "${lama_status}") == "true" ]]; then
        info "SKIPPING: REVOKED library prep [${info}]"
    elif [[ $(isolation_in_process_count "${lama_status}") -gt 0 ]]; then
        info "SKIPPING: PROCESSING isolation [${info}]"
    elif [[ $(isolation_failed_count "${lama_status}") -eq "${total_count}" ]]; then
        warn "CHECK: FAILED_FINAL status for all isolations [${info}]"
    elif [[ $(libraryprep_finished_count "${lama_status}") -eq 0 ]]; then
        info "SKIPPING: No finished library prep [${info}]"
    elif [[ $(is_already_reported "${lama_status}") == "true" ]]; then
        info "SKIPPING: Already REPORTED [${info}]"
    elif [[ "${api_sample_status}" == "null" ]]; then
        all_prep_status=$(jq -r '[.[].libraryPrepStatus]|join(",")' <<< "${lama_status}" )
        warn "CHECK: Final prep status [${all_prep_status}] but appears not yet sequenced [${info}]"
    else
        run_info=$(api -j runs "sample_name=${sampleId}" | jq -r '.[]|select(.context!="RESEARCH")|.set.name+" ("+.status+")"' | tail -1)
        warn "CHECK: Sample has status ${api_sample_status} [${info}]"
        warn "  \_ Most recent run: ${run_info}"
    fi
}

function is_already_reported(){
    local input=$1 && shift
    while read -r isolation_barcode; do
        report_count=$(grep -cE "${isolation_barcode}\W+" "${REPORT_SHARED_TSV}")
        if [[ "${report_count}" -gt 0 ]]; then
            echo "true"
            return
        fi
    done < <(jq -rc '.[].isolationBarcodes[]' <<< "${input}")
}

function libraryprep_finished_count(){
    local input=$1 && shift
    jq '[.[] | select(.libraryPrepStatus|test("^PROCESSING|PENDING|FAILED$")|not)] | length' <<< "${lama_status}"
}

function isolation_failed_count(){
    local input=$1 && shift
    jq '[.[] | select(.isolationStatus=="FAILED_FINAL")] | length' <<< "${lama_status}"
}

function isolation_in_process_count(){
    local input=$1 && shift
    jq '[.[] | select(.isolationStatus|test("^PROCESSING|PENDING|FAILED$"))] | length' <<< "${lama_status}"
}

function has_revoked_isolation(){
    local input=$1 && shift
    jq '[.[] | select(.isolationStatus=="REVOKED")] | length > 0' <<< "${input}"
}

function has_revoked_libraryprep(){
    local input=$1 && shift
    jq '[.[] | select(.libraryPrepStatus=="REVOKED")] | length > 0' <<< "${input}"
}

function all_isolations_are_on_storage(){
    local input=$1 && shift
    jq '[.[] | select(.isolationStatus!="STORAGE")] | length == 0' <<< "${input}"
}

function all_librarypreps_are_on_storage(){
    local input=$1 && shift
    jq '[.[] | select(.libraryPrepStatus!="STORAGE")] | length == 0' <<< "${input}"
}

main