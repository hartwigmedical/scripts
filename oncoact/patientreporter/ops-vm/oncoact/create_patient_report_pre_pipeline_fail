#!/usr/bin/env bash

source message_functions || exit 1
source lims_functions || exit 1

sample=$1 && shift
fail_reason=$1 && shift
correction_comments=$1 && shift
correction_extern=$1 && shift

if [[ -z "${sample}" ]]; then
    error "No tumor sample provided. Exiting"
fi

if [[ -z "${fail_reason}" ]]; then
    error "No fail reason provided (insufficient_tcp_shallow_wgs | insufficient_dna | technical_failure). Exiting"
fi

echo ""
echo "--- A pre-pipeline fail report will be created for ${sample}  ---"

if [[ ${correction_comments} != "" ]]; then
    echo "[IMPORTANT] this will be an correction report!"
    echo "[IMPORTANT] the following comments will be used: ${correction_comments}"
fi

if [[ $( gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    warn 'There already exists a patient report for this sample:'
    gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}
    echo '[INPUT] Are you sure you want to continue with making a new report? (all data will be overwritten, except for the report when making a corrected report) Please answer Y or N.'
    read answer
    if [[ $answer != 'Y' ]]; then
        warn "Report will not be created. exiting"
        exit 1
    fi
fi


### create temp folder in VM
temp_folder_path=$( pwd )"/temp_cp_${sample}"
mkdir $temp_folder_path

# create folder for report
mkdir ${temp_folder_path}/new_report
output_dir_report=${temp_folder_path}/new_report
output_dir_data_report=${temp_folder_path}/new_report


## running patient reporter

ref_sample=$(imply_ref_sample_from_tumor_sample ${sample})
ref_sample_barcode=$(find_ref_barcode_for_sample_name ${sample})
tumor_sample_barcode=$(find_barcode_for_sample_name ${sample})

if [[ -z "${tumor_sample_barcode}" ]]; then
    info "Could not find tumor sample barcode from metadata. Attempt to resolve from LIMS."
    tumor_sample_barcode=$(find_barcode_for_sample_name ${sample})
fi

barcode=$(find_barcode_for_sample_name ${sample})

if [[ ${fail_reason} == "insufficient_tcp_shallow_wgs" ]]; then
    ref_sample_mandatory=1
elif [[ ${fail_reason} == "insufficient_dna" || ${fail_reason} == "technical_failure" ]];then
  ref_sample_mandatory=0
fi

if [[ ${correction_comments} != "" ]]; then
    #corrected report
    if [[ -z "${correction_extern}" ]]; then
        error "Missing correction extern argument"
    fi
    if [[ ${correction_extern} == "extern" ]]; then
        do_run_qc_fail_patient_reporter "${sample}" "${barcode}" "${ref_sample}" "${ref_sample_barcode}" "${fail_reason}" "${ref_sample_mandatory}" \
                    -output_dir_report ${output_dir_report} \
                    -output_dir_data ${output_dir_data_report} \
                    -comments "${correction_comments}" \
                    -corrected_report &>> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
    fi

    if [[ ${correction_extern} == "intern" ]]; then
            do_run_qc_fail_patient_reporter "${sample}" "${barcode}" "${ref_sample}" "${ref_sample_barcode}" "${fail_reason}" "${ref_sample_mandatory}" \
                        -output_dir_report ${output_dir_report} \
                        -output_dir_data ${output_dir_data_report} \
                        -corrected_report &>> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
        fi

else
    #Normal report
    do_run_qc_fail_patient_reporter "${sample}" "${barcode}" "${ref_sample}" "${ref_sample_barcode}" "${fail_reason}" "${ref_sample_mandatory}" \
            -output_dir_report ${output_dir_report} \
            -output_dir_data ${output_dir_data_report} &>> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
fi

#check whether a report has been made
if [[ $( ls ${temp_folder_path}/new_report/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    report=$( ls ${temp_folder_path}/new_report | grep ".pdf" )
    json=$( ls ${temp_folder_path}/new_report | grep ${sample} | grep ${barcode} | grep -v "api-update" | grep "oncoact.json" )
    info "The report $report has been created"
else
    warn "No report has been created. Please see below the warnings/errors in the patient reporter log:"
    cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN\|ERROR\|Exception in thread"
    rm -r ${temp_folder_path}/ 2>&1
    warn "The script will end here. Exiting"
    exit 1
fi

#### check log file of making the report
if [[ $( cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN \|Exception in thread" | wc -l ) > 0 ]]; then
    warn "Running the patient reporter gave warnings/errors, please check using: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_patientreporter.log"
    #cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN\|ERROR\|Exception in thread"
else
    info "No warnings/errors in running the patient reporter. If you still want to inspect the log file you can run: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_patientreporter.log"
fi

#### cp report to gs://patient-reporter-manual-prod-1/ and remove temporary run folder
gsutil -q cp -r ${temp_folder_path}/new_report/* gs://patient-reporter-manual-prod-1/
rm -r ${temp_folder_path}/ 2>&1
info "The report and the related log + json file can be found in gs://patient-reporter-manual-prod-1/:"
gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}

### upload report to NC
upload_file_to_nc_new_reports_viewing gs://patient-reporter-manual-prod-1/ $report &> /dev/null
info "The report $report is uploaded to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing"

if [[ "${sample:0:6}" -eq "COREDB01" ]]; then
    upload_file_to_nc_new_reports_viewing gs://patient-reporter-manual-prod-1/ $json &> /dev/null
    info "The json file $json is uploaded to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing"
fi

### Patch reporting created endpoint
api_update_json=$(gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample} | grep "api-update.json" | grep -v "report_without_conclusion")
echo '[INPUT] Do you want to update the reporting created endpoint? Please answer Y or N.'
read answer
if [[ $answer == 'Y' ]]; then
  post_api_created_report ${api_update_json} ${sample}
fi

echo ""
