#!/usr/bin/env bash

source message_functions || exit 1
source locate_files || exit 1
source lims_functions || exit 1

set=$1 && shift

[[ -n "${set}" ]] || die "No set provided. Exiting"

#Searching and selecting run (including ${inc_inis} and excluding ${exc_buckets})
inc_inis="Targeted.ini"
exc_buckets="research-pipeline-output-prod"
runs_json=$(
  hmf_api_get "runs?set_name=${set}" | \
  jq --arg inis "$inc_inis" --arg buckets "$exc_buckets" \
  '[.[] | select(.ini | test($inis)) | select(.bucket | test($buckets)|not)]'
)

run_count=$(jq 'length' <<< "${runs_json}")
bucket=$( echo $runs_json | jq -r '.[].bucket' )
pipeline_version=$( echo $runs_json | jq -r '.[].version' | cut -d"." -f1,2 )
sample=$( echo $runs_json | jq -r '.[].set.tumor_sample' )
barcode=$( hmf_api_get "sets?name=${set}" | jq -r '.[].samples[] | select(.name=="'${sample}'") | .barcode' | cut -d"_" -f1 )

[[ "${run_count}" -eq 1 ]] || warn "Multiple runs were encountered for this set (${run_count}). Info is from the most recent run!"

if [[ ${run_count} == 0 ]]; then
    warn "No run was found for ${set} on gcp."
    exit 1
fi

set_url="gs://${bucket}/${set}"

echo ""
echo "--- A report will be created for ${sample} from run bucket gs://${bucket}/${set}/, pipeline version ${pipeline_version} ---"

if [[ $( gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    warn 'There already exists a patient report for this sample:'
    gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}
    echo '[INPUT] Are you sure you want to continue with making a new report? (all data will be overwritten, except for the report when making a corrected report) Please answer Y or N.'
    read answer
    if [[ $answer != 'Y' ]]; then
        warn "Report will not be created. exiting"
        exit 1
    fi
fi

### Copy run data from bucket to local in vm
temp_folder_path=$( pwd )"/temp_cp_${set}"
mkdir $temp_folder_path
gsutil -m cp ${set_url}/pipeline.version $temp_folder_path/ &> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/purple/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/sage_somatic/ $temp_folder_path/ &>> $temp_folder_path/copy.log

if [[ $( cat $temp_folder_path/copy.log | grep "CommandException:" | wc -l ) > 0 ]]; then
    warn "Making the copy gave errors (see below). Exiting."
    cat $temp_folder_path/copy.log
    rm -r $temp_folder_path/
    exit 1
fi

# create folder for report
mkdir ${temp_folder_path}/report
output_dir_report=${temp_folder_path}/report
output_dir_data_report=${temp_folder_path}/report

# Generate report
do_panel_report_for_run ${temp_folder_path} ${sample} ${barcode}  \
  -output_dir_report ${output_dir_report} \
  -output_dir_data ${output_dir_data_report} "$@" &> ${temp_folder_path}/report/${sample}_${barcode}_manual_panelreporter.log

if [[ $( ls ${temp_folder_path}/report/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    report=$( ls ${temp_folder_path}/report | grep ".pdf" )
    json=$( ls ${temp_folder_path}/report | grep ".json" )
    info "The report $report has been created"
else
    warn "No report has been created. Please see below the warnings/errors in the panel reporter log:"
    cat ${temp_folder_path}/report/${sample}_${barcode}_manual_panelreporter.log | grep "WARN\|ERROR\|Exception in thread"
    rm -r ${temp_folder_path}/ 2>&1
    warn "The script will end here. Exiting"
    exit 1
fi


#### check log file of making the report
if [[ $( cat ${temp_folder_path}/report/${sample}_${barcode}_manual_panelreporter.log | grep "WARN \|Exception in thread" | grep -v "has already been reported" |  wc -l ) > 0 ]]; then
    warn "Running the patient reporter gave warnings/errors, please check using: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_panelreporter.log"
else
    cat ${temp_folder_path}/report/${sample}_${barcode}_manual_panelreporter.log | grep 'WARN ' | grep "has already been reported"
    info "No warnings/errors (except possibly already reported) in running the patient reporter. If you still want to inspect the log file you can run: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_panelreporter.log"
fi

#### cp report to gs://patient-reporter-manual-prod-1/
gsutil -q cp -r ${temp_folder_path}/report/* gs://patient-reporter-manual-prod-1/
info "The report and the related json + log file can be found in gs://patient-reporter-manual-prod-1/:"
gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}

### upload report to NC

upload_file_to_nc_new_reports_viewing gs://patient-reporter-manual-prod-1/ $report &> /dev/null
upload_file_to_nc_new_reports_viewing gs://patient-reporter-manual-prod-1/ $json &> /dev/null
info "Files are uploaded to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing"

### Patch reporting created endpoint
api_update_json=$( gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample} | grep "api-update.json")
echo '[INPUT] Do you want to update the reporting created endpoint? Please answer Y or N.'
read answer
if [[ $answer == 'Y' ]]; then
  post_api_created_report ${api_update_json} ${sample}
fi

### remove temporary folder
rm -r ${temp_folder_path}/ 2>&1
