#!/usr/bin/env bash

source locate_files || exit 1
source metadata_functions || exit 1
source lims_functions || exit 1
source message_functions || exit 1
source api_functions || exit 1

samplename=$1 && shift
target_dir="gs://hmf-nki-lskg/"
data_dir="gs://diagnostic-pipeline-output-prod-1/"

# Check if sample exists
if [[ -z "${samplename}" ]]; then
    error "No samplename provided. Exiting"
fi

# Get run dit from samplename
run_dir=$(api runs "${samplename}" sample_name | grep "diagnostic-pipeline-output-prod-1" | grep "Validated" | cut -f1)

sample_dir=${data_dir}${run_dir}

# Check if rundir exists
if [[ -z "${run_dir}" ]]; then
    echo "No run dir provided or run dir does not exist due to no Validated diagnostic run available. Available runs:"
    api runs "${samplename}" sample_name
    error "Exiting."
fi

# Get sample name from run dir
#samplename=$(gsutil cat ${sample_dir}/metadata.json | jq -r '.tumor.sampleName')
#if [[ -z "${samplename}" ]]; then
#    error "No sample name found. Exiting"
#fi

# Check if samplename is correct (still for NKI)
if [[ $samplename != COREDB01* ]]; then
        error "Samplename not in correct NKI format. Exiting."
fi

echo "## Preparing germline files for transfer for ${samplename}"

## Check if informed consent is available
#ic_status=$(curl http://lama.prod-1/api/patients/samples/${samplename} | jq --arg samplename "$samplename" '.tumorSamples[] | select(._id | contains($samplename)) | .patientGermlineChoice')
## Check if only one api response received
#if [[ "$ic_status" != "\"Yes\"" ]]; then
#	echo ${ic_status}
#	echo "IMPORTANT: No informed consent is registered for germline analysis. Make sure you are allowed to share the data."
#else
#	echo "Informed consent registered for germline reporting."
#fi

ref_samplename=$( gsutil cat ${sample_dir}/metadata.json | jq -r '.reference.sampleName' )


# germline SNVs
purple_germline_vcf=${sample_dir}/purple/${samplename}.purple.germline.vcf.gz
purple_germline_vcf_tbi=${sample_dir}/purple/${samplename}.purple.germline.vcf.gz.tbi

# germline deletions:
purple_germline_deletion=${sample_dir}/purple/${samplename}.purple.germline.deletion.tsv

# germline disruptions:

gripss_germline_vcf=${sample_dir}/gripss_germline/${ref_samplename}.gripss.filtered.germline.vcf.gz
gripss_germline_vcf_tbi=${sample_dir}/gripss_germline/${ref_samplename}.gripss.filtered.germline.vcf.gz.tbi
linx_germline_disruption=${sample_dir}/linx_germline/${samplename}.linx.germline.disruption.tsv

# germline driver catalogs
linx_germline_driver_catalog=${sample_dir}/linx_germline/${samplename}.linx.germline.driver.catalog.tsv
purple_germline_driver_catalog=${sample_dir}/purple/${samplename}.driver.catalog.germline.tsv


# Check if germline files exist
gsutil -q stat ${purple_germline_vcf} || error "Cannot find PURPLE germline file."
gsutil -q stat ${purple_germline_vcf_tbi} || error "Cannot find PURPLE germline file index."
gsutil -q stat ${purple_germline_deletion} || error "Cannot find PURPLE germline deletions."
gsutil -q stat ${gripss_germline_vcf} || error "Cannot find GRIPSS germline file."
gsutil -q stat ${gripss_germline_vcf_tbi} || error "Cannot find GRIPSS germline file index."
gsutil -q stat ${linx_germline_disruption} || error "Cannot find LINX germline file."
gsutil -q stat ${linx_germline_driver_catalog} || error "Cannot find LINX germline driver catalog file."
gsutil -q stat ${purple_germline_driver_catalog} || error "Cannot find PURPLE germline driver catalog file."


# Copy files to target dir
gsutil cp ${purple_germline_vcf} ${target_dir}${samplename}/
gsutil cp ${purple_germline_vcf_tbi} ${target_dir}${samplename}/
gsutil cp ${purple_germline_deletion} ${target_dir}${samplename}/
gsutil cp ${gripss_germline_vcf} ${target_dir}${samplename}/
gsutil cp ${gripss_germline_vcf_tbi} ${target_dir}${samplename}/
gsutil cp ${linx_germline_disruption} ${target_dir}${samplename}/
gsutil cp ${linx_germline_driver_catalog} ${target_dir}${samplename}/
gsutil cp ${purple_germline_driver_catalog} ${target_dir}${samplename}/


echo "Number of files shared:"
gsutil ls ${target_dir}${samplename}/ | wc -l
echo "Specific files:"
gsutil ls ${target_dir}${samplename}/
echo "## Done."