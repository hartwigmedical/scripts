#!/usr/bin/env bash

source message_functions || exit 1
source locate_files || exit 1

echo '[INPUT] Do you have updated the oncoAct tumor WGS PDF/XML/JSON report and oncoAct tumor panel NGS result PDF report? Please answer Y or N.'
read answer_protect
if [[ $answer_protect == 'N' ]]; then
    exit
fi

echo '[INPUT] Do you have updated the manual files for the report resources (readme of oncoAct tumor WGS and readme of oncoAct tumor panel NGS result?) Please answer Y or N.'
read answer_protect
if [[ $answer_protect == 'N' ]]; then
    exit
fi

info "Starting to generate the oncoAct tumor WGS and oncoAct tumor panel NGS result data to the resources gcp bucket"

currentDate=$(date +'%Y%m%d')
report_resources_dir="/data/resources/report_resources"
achive_dir="${report_resources_dir}/${currentDate}_patient_report_resources"
archive_dir_oncoact="${achive_dir}/oncoact_tumor_wgs"
archive_dir_oncopanel="${achive_dir}/oncoact_tumor_ngs_panel"
mkdir ${achive_dir}
mkdir ${archive_dir_oncoact}
mkdir ${archive_dir_oncopanel}

info "Extracting peach information to tsv files"
# names of pgx files can be found in the make peach script
make_peach_reporting_summary_tsvs --input ${report_resources_dir}/peach.json --output_dir ${archive_dir_oncoact}

info "Extracting gene transcript information to tsv file"
Rscript /data/repos/scripts/oncoact/patientreporter/ops-vm/resource/generate_transcriptlist_oncoact.R
Rscript /data/repos/scripts/oncoact/patientreporter/ops-vm/resource/generate_transcriptlist_oncopanel.R

#files oncoact
info "Collecting oncoAct tumor WGS data"
hmf_funsion_panel_csv="${report_resources_dir}/known_fusion_data.37.csv"
hmf_gene_panel_csv="${report_resources_dir}/37/DriverGenePanel.37.tsv"
virus_reporting_db_tsv="${report_resources_dir}/virus_reporting_db.tsv"
oncoact_report_pdf="${report_resources_dir}/oncoact_wgs_report.pdf"
oncoact_report_xml="${report_resources_dir}/oncoact_wgs_report.xml"
oncoact_report_json="${report_resources_dir}/oncoact_wgs_report.json"
#germline_reporting_tsv=$(locate_germline_reporting_prod)
onocoact_readme="/data/resources/ops/report_resources/oncoact_wgs_readme.tsv"
hmf_pgx_haplotypes="${archive_dir_oncoact}/oncoact_wgs_pgx_haplotypes.tsv"
hmf_pgx_variants_tsv="${archive_dir_oncoact}/oncoact_wgs_pgx_variants.tsv"
hmf_pgx_drugs_tsv="${archive_dir_oncoact}/oncoact_wgs_pgx_drugs.tsv"
oncoact_gene_transcripts="${report_resources_dir}/oncoact_wgs_gene_transcripts.tsv"
clinical_gene_transcripts="/data/resources/ops/clinical_transcripts/clinical_transcripts.tsv"

if [[ -z "${hmf_funsion_panel_csv}" ]]; then
        error "Unable to locate fusion panel CSV file."
fi

if [[ -z "${hmf_gene_panel_csv}" ]]; then
        error "Unable to locate gene panel CSV file."
fi
if [[ -z "${virus_reporting_db_tsv}" ]]; then
        error "Unable to locate virus reporting db TSV file."
fi

if [[ -z "${oncoact_report_pdf}" ]]; then
        error "Unable to locate oncoact report PDF file."
fi

if [[ -z "${oncoact_report_xml}" ]]; then
        error "Unable to locate oncoact XML file."
fi

if [[ -z "${oncoact_report_json}" ]]; then
        error "Unable to locate oncoact JSON file."
fi

# TODO: Taggle on when we start again with notification of germline finsings in patient report
#if [[ -z "${germline_reporting_tsv}" ]]; then
#        error "Unable to locate germline reporting tsv file."
#fi

if [[ -z "${hmf_pgx_haplotypes}" ]]; then
        error "Unable to locate pgx haplotypes TSV file."
fi

if [[ -z "${hmf_pgx_variants_tsv}" ]]; then
        error "Unable to locate pgx variants TSV file."
fi

if [[ -z "${hmf_pgx_drugs_tsv}" ]]; then
        error "Unable to locate pgx drugs TSV file."
fi

if [[ -z "${oncoact_gene_transcripts}" ]]; then
        error "Unable to locate gene transcripts TSV file."
fi

if [[ -z "${clinical_gene_transcripts}" ]]; then
        error "Unable to locate clinical gene transcripts TSV file."
fi

if [[ -z "${onocoact_readme}" ]]; then
        error "Unable to locate oncoact wgs readme TXT file."
fi

# Copy oncoact wgs data to the archive dir
cp ${hmf_funsion_panel_csv} "${archive_dir_oncoact}/oncoact_wgs_fusion_panel.csv"
cp ${hmf_gene_panel_csv} "${archive_dir_oncoact}/oncoact_wgs_gene_panel.tsv"
cp ${virus_reporting_db_tsv} "${archive_dir_oncoact}/oncoact_wgs_virus_panel.tsv"
cp ${oncoact_report_pdf} "${archive_dir_oncoact}/oncoact_wgs_report.pdf"
cp ${oncoact_report_xml} "${archive_dir_oncoact}/oncoact_wgs_report.xml"
cp ${oncoact_report_json} "${archive_dir_oncoact}/oncoact_wgs_report.json"
#cp ${germline_reporting_tsv} "${archive_dir_oncoact}/hmf_germline_reporting.tsv"
cp ${onocoact_readme} "${archive_dir_oncoact}/oncoact_wgs_readme.txt"
cp ${oncoact_gene_transcripts} "${archive_dir_oncoact}/oncoact_wgs_gene_transcripts.tsv"
cp ${clinical_gene_transcripts} "${archive_dir_oncoact}/oncoact_wgs_clinical_gene_transcripts.tsv"

#files onocpanel
info "Collecting oncoAct tumor NGS result data"

onco_panel_genes_tsv="${report_resources_dir}/38/DriverGenePanel.38.tsv"
onco_panel_vcf_header_definitions="/data/resources/ops/report_resources/oncoact_panel_vcf_header_definitions.tsv"
oncopanel_report_pdf="${report_resources_dir}/oncoact_panel_result_report.pdf"
oncopanel_readme="/data/resources/ops/report_resources/oncoact_panel_readme.tsv"
oncopanel_gene_transcripts="${report_resources_dir}/oncoact_panel_gene_transcripts.tsv"

if [[ -z "${onco_panel_genes_tsv}" ]]; then
        error "Unable to locate onco panel genes TSV file."
fi

if [[ -z "${onco_panel_vcf_header_definitions}" ]]; then
        error "Unable to locate onco panel VCF header definitions file."
fi

if [[ -z "${oncopanel_report_pdf}" ]]; then
        error "Unable to locate oncopanel report PDF file."
fi

if [[ -z "${oncopanel_readme}" ]]; then
        error "Unable to locate oncopanel readme TXT file."
fi

if [[ -z "${oncopanel_gene_transcripts}" ]]; then
        error "Unable to locate gene transcript TSV file."
fi

# Copy oncopanel data to the archive dir
cp ${onco_panel_genes_tsv} "${archive_dir_oncopanel}/oncoact_panel_gene_panel.tsv"
cp ${onco_panel_vcf_header_definitions} "${archive_dir_oncopanel}/oncoact_panel_vcf_header_definitions.tsv"
cp ${oncopanel_report_pdf} "${archive_dir_oncopanel}/oncoact_panel_result_report.pdf"
cp ${oncopanel_readme} "${archive_dir_oncopanel}/hmf_oncopanel_readme.txt"
cp ${oncopanel_gene_transcripts} "${archive_dir_oncopanel}/oncoact_panel_gene_transcripts.tsv"

# Zipping the dir
info "Zipping the oncoPanel and OncoAct data"
oncoact_zip_date="${report_resources_dir}/${currentDate}_oncoact_wgs.zip"
oncoact_zip_latest="${report_resources_dir}/latest_oncoact.zip"
oncopanel_zip_date="${report_resources_dir}/${currentDate}_oncoact_panel.zip"
oncopanel_zip_latest="${report_resources_dir}/latest_oncopanel.zip"

zip -r ${oncoact_zip_date} ${archive_dir_oncoact}
zip -r ${oncoact_zip_latest} ${archive_dir_oncoact}
zip -r ${oncopanel_zip_date} ${archive_dir_oncopanel}
zip -r ${oncopanel_zip_latest} ${archive_dir_oncopanel}

## copy data to bucket
info "Copy the oncoAct data to the gcp bucket"
bucket="hmf-public"
path_oncoact="OncoAct-Resources"
# file download on https://storage.googleapis.com/hmf-public/OncoAct-Resources/latest_oncoact.zip"
gsutil cp ${oncoact_zip_date} gs://${bucket}/${path_oncoact}
gsutil cp ${oncoact_zip_latest} gs://${bucket}/${path_oncoact}

info "Copy the oncoPanel data to the gcp bucket"
path_oncopanel="OncoPanel-Resources"
# file download on "https://storage.googleapis.com/hmf-public/OncoPanel-Resources/latest_oncopanel.zip"
gsutil cp ${oncopanel_zip_date} gs://${bucket}/${path_oncopanel}
gsutil cp ${oncopanel_zip_latest} gs://${bucket}/${path_oncopanel}

##Deleting data
info "Removing temporarily data"
rm ${oncoact_zip_date}
rm ${oncoact_zip_latest}
rm ${oncopanel_zip_date}
rm ${oncopanel_zip_latest}
rm -r ${achive_dir}

info "Complete"