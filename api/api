#!/usr/bin/env bash

source message_functions || exit 1

classes=(accounts biopsies datasets datatypes entities fastq files flowcells groups inis lanes platforms runs samples sets sequencers
reports/created reports/shared)

print_usage(){
    script=$(basename "$0")
    echo "---"
    echo "Usage: $script [-j, -t] <class> [<filter>]"
    echo " Mode 1: $script <class> # no filter returns all records of class"
    echo " Mode 2: $script <class> <contains-no-equal-sign> # filter by default 'name' key"
    echo " Mode 3: $script <class> <filter-key=filter-value> # filter by specifying exact query (requires '=' in query)"
    echo " Mode 4 [DEPRECATED]: $script <class> <filter-value> <filter-key> # filter by specifying key to filter on"
    echo "Examples:"
    echo " $script platforms"
    echo " $script flowcells NS21-0064"
    echo " $script flowcells 'status=Converted'"
    echo " $script samples 'flowcell_id=8233'"
    echo " $script samples ACTN01020001T"
    echo " $script samples 'barcode=FR30539000'"
    echo " $script samples 'name=ACTN01020001T&type=tumor-rna'"
    echo " $script runs 'ini=Somatic.ini&status=Validated&context=DIAGNOSTIC'"
    echo " $script runs 'barcode=FR30539000'"
    echo " $script sets 210824_HMFregACTN_FR30538995_FR30539000_ACTN01020001"
    echo " $script -j datasets 'ACTN01020001T'"
    echo "Options:"
    echo " -j  Output raw api json content instead of TSV"
    echo " -t  Use testing/pilot environment instead of production"
    echo "Notes:"
    echo " * Default filter-key is [name]"
    echo " * Available classes: ${classes[*]}"
    echo " * Use script hmf_api_get instead for all scripted use"
    echo "---"
    exit 1
}

output_json='FALSE'
additional_get_params=""

while getopts ':jrt' flag; do
    case "${flag}" in
        j) output_json='TRUE' ;;
        t) additional_get_params="-t";;
        *) print_usage >&2
        exit 1 ;;
    esac
done
class=${*:$OPTIND:1} && shift # obligatory
filter_input=${*:$OPTIND:1} && shift # optional
filter_field=${*:$OPTIND:1} && shift # optional but required if searching by any field other than the "name" of object

if [[ -z "$class" || $1 == "-h" || $1 == "--help" ]]; then
    print_usage >&2
fi

main(){
    # Sanity checks
    contains "${class}" "${classes[@]}" || die "Unknown class '${class}' provided."

    if [[ -n "${filter_field}" ]]; then
        filter_field="${filter_field}"
    elif [[ "${class}" == "runs" ]]; then
        filter_field="set_name" # runs have no name field but do have a set_name filter
    elif [[ "${class}" == "datasets" ]]; then
        filter_field="id"
    else
        filter_field="name"
    fi

    # Retrieval
    json_result=""
    if [[ -n "${filter_input}" ]]; then
        if [[ "${filter_field}" == "id" ]]; then
            # shellcheck disable=SC2086
            json_result=$(hmf_api_get $additional_get_params "${class}/${filter_input}") || die "Unable to get result from API (selecting by id ${filter_input})"
            # In case one object is queried by id the result is not an array so wrap to allow downstream print
            json_result=$(jq '[.]' <<< "${json_result}")
        elif [[ "${filter_input}" =~ = ]]; then
            json_result=$(hmf_api_get $additional_get_params "${class}?${filter_input}") || die "Unable to get result from API (selecting ${class}?${filter_input})"
        else
            # shellcheck disable=SC2086
            json_result=$(hmf_api_get $additional_get_params "${class}?${filter_field}=${filter_input}") || die "Unable to get result from API (with filter on field ${filter_field})"
        fi
    else
        # shellcheck disable=SC2086
        json_result=$(hmf_api_get $additional_get_params "${class}") || die "Unable to get result from API (without filter)"
    fi

    # Printing
    if [[ "${output_json}" == "TRUE" ]]; then
        echo "${json_result}"
    elif [[ "${class}" == "reports/created" ]]; then
        printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" barcode sample_name cohort report_type source create_time run_id id
        jq -r '.[] | [.barcode, .sample_name, .cohort, .report_type, .source, .create_time, .run_id, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "reports/shared" ]]; then
        printf "#%s\t%s\t%s\n" share_time report_created_id id
        jq -r '.[] | [.share_time, .report_created.id, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "fastq" ]]; then
        printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" name_r1 name_r2 q30 yld sample_id qc_pass bucket id
        jq -r '.[] | [.name_r1, .name_r2, .q30, .yld, .sample_id, .qc_pass, .bucket, .id] | @tsv' <<< "${json_result}" \
        | awk 'BEGIN{ FS=OFS="\t" }NR>0{ $3=sprintf("%.1f",$3); $4=int($4/1e9) }1'
    elif [[ "${class}" == "lanes" ]]; then
        printf "#%s\t%s\t%s\n" name flowcell_id id
        jq -r '.[] | [.name, .flowcell_id, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "flowcells" ]]; then
        printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" flowcell_id name q30 yield undet_yield status qc updateDate id
        jq -r '.[] | [.flowcell_id, .name, .q30, .yld, .undet_rds, .status, .undet_rds_p_pass, (.updateTime|.[:10]), .id] | @tsv' <<< "${json_result}" \
        | awk 'BEGIN{ FS=OFS="\t" }NR>0{ $3=sprintf("%.1f",$3); $4=int($4/1e9); $5=int($5/1e9) }1'
    elif [[ "${class}" == "samples" ]]; then
        printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" submission barcode q30_req q30 yld_req yld status name type id
        jq -r '.[] | [.submission, .barcode, .q30_req, .q30, .yld_req, .yld, .status, .name, .type, .id] | @tsv' <<< "${json_result}" \
        | awk 'BEGIN{ FS=OFS="\t" }NR>0{ $3=sprintf("%.1f",$3); $4=sprintf("%.1f",$4); $5=int($5/1e9); $6=int($6/1e9) }1'
    elif [[ "${class}" == "runs" ]]; then
        printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" name ref tum ini version status failure context bucket startDate endDate id
        jq -r '.[] | [.set.name,
        .set.ref_sample,
        .set.tumor_sample,
        .ini,
        .version,
        .status,
        (if .failure then (.failure.type+"/"+.failure.source)//"NA" else "NA" end),
        .context,
        .bucket,
        (if .startTime then .startTime|.[:10] else "NA" end),
        (if .endTime then .endTime|.[:10] else "NA" end),
        .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "platforms" ]]; then
        printf "#%s\t%s\t%s\t%s\t%s\n" name max_undet min_q30 min_sample_yield id
        jq -r '.[] | [.name, .undetermined_reads_perc_cutoff, .q30_cutoff, .sample_yield_cutoff, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "sets" ]]; then
        printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\n" name entity_id ref_name tum_name ref_barcode tum_barcode id
        jq -r '.[] | [.name,
        .entity_id,
        (.samples[]|select(.type=="ref")|.name)//"NA",
        (.samples[]|select(.type|contains("tumor"))|.name)//"NA",
        (.samples[]|select(.type=="ref")|.barcode)//"NA",
        (.samples[]|select(.type|contains("tumor"))|.barcode)//"NA",
        .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "entities" ]]; then
        printf "#%s\t%s\t%s\t%s\n" name bucket add_to_db id
        jq -r '.[] | [.name, .bucket, .add_to_db, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "inis" ]]; then
        printf "#%s\t%s\n" name id
        jq -r '.[] | [.name, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "sequencers" ]]; then
        printf "#%s\t%s\t%s\n" name platform_id id
        jq -r '.[] | [.name, .platform_id, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "biopsies" ]]; then
        printf "#%s\t%s\n" name id
        jq -r '.[] | [.name, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "accounts" ]]; then
        printf "#%s\t%s\n" email id
        jq -r '.[] | [.email, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "groups" ]]; then
        printf "#%s\t%s\n" name id
        jq -r '.[] | [.name, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "datasets" ]]; then
        printf "#%s\t%s\t%s\t%s\n" sample_name version file_type file_url
        jq -r '.[] | del(.rna_raw_reads) | keys[] as $k | .[$k] | keys[] as $s | "\($s)\t\(.[$s].version)\t\($k)\t\(.[$s].path)"' <<< "${json_result}"
        # Need to grab RNA data separately because data structure differs
        jq --arg t "rna_raw_reads" -r 'select(.[][$t]) | .[][$t] | keys[] as $s | .[$s][] | [$s, .version, $t, .path] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "datatypes" ]]; then
        printf "#%s\t%s\n" name id
        jq -r '.[] | [.name, .id] | @tsv' <<< "${json_result}"
    elif [[ "${class}" == "files" ]]; then
        printf "#%s\t%s\t%s\t%s\n" path run_id datatype id
        jq -r '.[] | [.filepath, .run_id, .datatype, .id] | @tsv' <<< "${json_result}"
    else
        die "Table print for class ${class} is not supported"
    fi
}

contains(){
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}

main