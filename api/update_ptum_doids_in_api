#!/usr/bin/env bash

source message_functions || exit 1

print_usage(){
    echo "-----"
    echo " Descr: Patches tumor sample DIOD info in API"
    echo " Usage: nohup $(basename "$0") -m dryrun > /path/to/log &"
    echo "        nohup $(basename "$0") -m patch > /path/to/log &"
    echo "-----"
    exit 1
}
[[ $# -gt 0 ]] || print_usage

doid_file="/data/dbs/clinical_data/curated_primary_tumor_from_lama.tsv"
field_idx='7'

mode='undefined'
while getopts ':m:' flag; do
    case "${flag}" in
        m) mode=${OPTARG} ;;
        *) print_usage >&2
        exit 1 ;;
    esac
done

main () {
    info "Starting with $(basename "$0")"

    info "Updating DOID file"
    lama_create_curated_primary_tumor_tsv

    [[ -f "${doid_file}" ]] || die "Missing file (${doid_file})"
    [[ "${mode}" =~ ^(dryrun|patch)$ ]] || die "Unknown mode (${mode})"
    doid_file_is_ok || die "Something wrong with ${doid_file}"

    info "Using input file: ${doid_file}"

    total_considered=0
    total_updated=0

    samples_json=$(hmf_api_get "samples?type=tumor")
    sample_count=$(jq 'length' <<< "${samples_json}")
    info "Will check a total of ${sample_count} tumor samples"

    while read -r line; do
        api_barcode=$(echo "${line}" | cut -f1)
        api_name=$(echo "${line}" | cut -f2)
        api_id=$(echo "${line}" | cut -f3)
        api_doids=$(sort_csv_string "$(echo "${line}" | cut -f4)")

        # do not consider test samples
        if [[ "${api_name}" == "CPCT12345678T" || "${api_name}" == "CPCT11111111T" ]]; then
            info "SKIPPING: sample is a test sample (${api_name})"
            continue
        fi

        # only consider samples meant for OncoAct
        if [[ ! "${api_name}" =~ ^(CPCT|DRUP|WIDE|CORE|ACTN|SHRP|GAYA|OPTC|GLOW|OMIC|TARG) ]]; then
            #info "SKIPPING: sample is not an OncoAct sample (${api_name})"
            continue
        fi

        total_considered=$((total_considered+1))
        patient=${api_name:0:12}
        count=$(grep -cP "^${patient}" "${doid_file}")
        sample_info="${api_barcode} (name:${api_name} id:${api_id})"

        if [[ "${count}" -eq 0 ]]; then
            warn "SKIPPING: patient ID missing in doid file for ${sample_info}"
        elif [[ "${count}" -gt 1 ]]; then
            warn "SKIPPING: multiple matches in doid file for ${sample_info}"
        elif [[ "${count}" -eq 1 ]]; then
            file_doids=$(get_doids "${patient}")
            file_doids=$(sort_csv_string "${file_doids}")
            if [[ "${file_doids}" == "${api_doids}" ]]; then
                continue
            elif [[ "${file_doids}" == "" ]]; then
                warn "SKIPPING: no doids present in doid file for ${sample_info}"
            else
                if [[ "${mode}" == "patch" ]]; then
                    info "OK: updating ('${api_doids}' to '${file_doids}') for ${sample_info}"
                    hmf_api_patch -e -c samples -o "${api_id}" -f primary_tumor_doids -v "${file_doids}"
                elif [[ "${mode}" == "dryrun" ]]; then
                    info "OK: would update ('${api_doids}' to '${file_doids}') for ${sample_info}"
                else
                    warn "Param mode has unexpected value (${mode})"
                fi
                total_updated=$((total_updated+1))
            fi
        else
            die "Impossible state reached in if/else: check conditions! (${sample_info})"
        fi
    done < <(echo "$samples_json" | jq -cr '.[] | [.barcode,.name,.id,(.primary_tumor_doids | join(","))] | @tsv')

    info "A total of ${total_updated} samples were updated of ${total_considered} considered"
    info "Finished with $(basename "$0")"
}

sort_csv_string () {
    local string=$1 && shift
    echo "${string}" | sed -e $'s/,/\\\n/g' | sort -n | tr '\n' ',' | sed 's/.$//'
}

doid_file_is_ok () {
    local expected="doids"
    local name=""
    name=$(head -1 "${doid_file}" | cut -f"${field_idx}")
    if [[ "${name}" != "${expected}" ]]; then
        die "Input file ${doid_file} does not have correct header (expected:${expected} found:${name})"
    fi
}

get_doids () {
    local patient=$1 && shift
    doids=$(grep -P "^${patient}" "${doid_file}" | cut -f7 | sed 's/;/,/g')
    echo "${doids}"
}

main
