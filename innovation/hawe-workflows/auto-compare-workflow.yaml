name: "auto-compare"
version: "0.1.0"
storagePath: "gs://auto-compare-output"  # output location for logs or intermediate files
externalInputs:
  - name: truth_bucket
    location: "${truth_bucket_uri}"
  - name: target_bucket
    location: "${target_bucket_uri}"
stages:
  - name: "execute-compar"
    image: "europe-west4-docker.pkg.dev/hmf-build/hmf-docker-crunch/auto-compare"
    version: "0.0.5"
    command: "bash /config/run.sh"
    configFiles:
      run.sh: |
        #!/usr/bin/env bash
        set -eo pipefail

        # Internal working variables; external variables are referenced as ${run_id}, etc.
        WORK_DIR="/tmp/work"
        TRUTH_BUCKET="/in/truth_bucket"
        TARGET_BUCKET="/in/target_bucket"
        RUN_ID=${run_id}
        REF_VERSION=${ref_version}
        OPTIONAL_ARGS=${compar_optional_arguments}

        # Additional parameters
        COMPAR_JAR="compar_v1.3.0.jar"  # This jar is included in the Docker image.
        # Select the driver gene panel based on the reference version.
        if [ "$REF_VERSION" == "37" ]; then
            DRIVER_GENE_PANEL="/data/resources/gene_panel/DriverGenePanel.37.tsv"
        elif [ "$REF_VERSION" == "38" ]; then
            DRIVER_GENE_PANEL="/data/resources/gene_panel/DriverGenePanel.38.tsv"
        else
            echo "Unsupported ref_version: $REF_VERSION"
            exit 1
        fi

        # Derive internal paths based on external inputs
        BASE_DIR="$WORK_DIR"
        TRUTH_INPUT_DIR="$TRUTH_BUCKET"
        TARGET_INPUT_DIR="$TARGET_BUCKET"
        OUTPUT_DIR="$BASE_DIR/compar_$RUN_ID"
        OUTPUT_ID="$RUN_ID"

        echo "[$(date +"%Y-%m-%dT%H:%M:%S")] Starting COMPAR with RUN_ID: $RUN_ID"
        echo "BASE_DIR: $BASE_DIR"
        echo "TRUTH_INPUT_DIR: $TRUTH_INPUT_DIR"
        echo "TARGET_INPUT_DIR: $TARGET_INPUT_DIR"
        echo "OUTPUT_DIR: $OUTPUT_DIR"
        echo "Using driver gene panel: $DRIVER_GENE_PANEL"
        echo "Optional compar arguments: $OPTIONAL_ARGS"

        main() {
            echo [INFO] "Started running COMPAR"

            echo [INFO] "Using output directory: $OUTPUT_DIR"
            create_dir "$OUTPUT_DIR" || echo [ERROR] "Could not create output dir: $OUTPUT_DIR"

            RENAMED_TRUTH_RUNS_DIR="$OUTPUT_DIR/truth"
            create_dir "$RENAMED_TRUTH_RUNS_DIR" || echo [ERROR] "Could not create output dir: $RENAMED_TRUTH_RUNS_DIR"
            symlink_runs_to_tumor_name "$TRUTH_INPUT_DIR" "$RENAMED_TRUTH_RUNS_DIR" || echo [ERROR] "Could not symlink truth runs"

            RENAMED_TARGET_RUNS_DIR="$OUTPUT_DIR/target"
            create_dir "$RENAMED_TARGET_RUNS_DIR" || echo [ERROR] "Could not create output dir: $RENAMED_TARGET_RUNS_DIR"
            symlink_runs_to_tumor_name "$TARGET_INPUT_DIR" "$RENAMED_TARGET_RUNS_DIR" || echo [ERROR] "Could not symlink target runs"

            SAMPLE_ID_FILE="$OUTPUT_DIR/sample_ids.csv"
            if [[ -f "$SAMPLE_ID_FILE" ]]; then
                echo [WARN] "Skip creation of sample ID file: $SAMPLE_ID_FILE"
            else
                echo [INFO] "Creating sample ID file: $SAMPLE_ID_FILE"
                SAMPLE_IDS=$( (ls "$RENAMED_TARGET_RUNS_DIR" && ls "$RENAMED_TRUTH_RUNS_DIR") | sort -u ) || echo [ERROR] "Could not get sample ID's"
                echo "SampleId,GermlineSampleId,RefSampleId,RefGermlineSampleId,NewSampleId,NewGermlineSampleId" > "$SAMPLE_ID_FILE"
                for SAMPLE_ID in $SAMPLE_IDS; do
                    TRUTH_REF_SAMPLE_ID=$(jq -r .reference.sampleName < "$RENAMED_TRUTH_RUNS_DIR/$SAMPLE_ID/metadata.json") \
                        || (echo "" && echo [WARN] "Could not get truth reference sample ID for $SAMPLE_ID")
                    TARGET_REF_SAMPLE_ID=$(jq -r .reference.sampleName < "$RENAMED_TARGET_RUNS_DIR/$SAMPLE_ID/metadata.json") \
                        || (echo "" && echo [WARN] "Could not get target reference sample ID for $SAMPLE_ID")
                    echo "$SAMPLE_ID,$TARGET_REF_SAMPLE_ID,$SAMPLE_ID,$TRUTH_REF_SAMPLE_ID,$SAMPLE_ID,$TARGET_REF_SAMPLE_ID" >> "$SAMPLE_ID_FILE"
                done
            fi

            cat $SAMPLE_ID_FILE

            COMPAR_REPORTED_OUTPUT_DIR="$OUTPUT_DIR/reported"
            if [[ -d "$COMPAR_REPORTED_OUTPUT_DIR" ]]; then
                echo [WARN] "Skipping COMPAR Reported; output directory exists"
            else
                create_dir "$COMPAR_REPORTED_OUTPUT_DIR" || echo [ERROR] "Could not create COMPAR reported output dir: $COMPAR_REPORTED_OUTPUT_DIR"
                echo [INFO] "Running COMPAR Reported"
                java -jar "$COMPAR_JAR" \
                  -sample_id_file "$SAMPLE_ID_FILE" \
                  -categories "ALL" \
                  -match_level "REPORTABLE" \
                  -driver_gene_panel "$DRIVER_GENE_PANEL" \
                  -sample_dir_ref "$RENAMED_TRUTH_RUNS_DIR/*" \
                  -sample_dir_new "$RENAMED_TARGET_RUNS_DIR/*" \
                  -somatic_unfiltered_vcf_ref "$RENAMED_TRUTH_RUNS_DIR/*/sage_somatic/*.sage.somatic.vcf.gz" \
                  -somatic_unfiltered_vcf_new "$RENAMED_TARGET_RUNS_DIR/*/sage_somatic/*.sage.somatic.vcf.gz" \
                  -output_dir "$COMPAR_REPORTED_OUTPUT_DIR" \
                  -output_id "$OUTPUT_ID" \
                  -log_debug \
                  -threads 16 \
                  $OPTIONAL_ARGS || echo [ERROR] "COMPAR Reported failed"
            fi

            COMPAR_ALL_OUTPUT_DIR="$OUTPUT_DIR/all"
            if [[ -d "$COMPAR_ALL_OUTPUT_DIR" ]]; then
                echo [WARN] "Skipping COMPAR ALL; output directory exists"
            else
                create_dir "$COMPAR_ALL_OUTPUT_DIR" || echo [ERROR] "Could not create COMPAR ALL output dir: $COMPAR_ALL_OUTPUT_DIR"
                echo [INFO] "Running COMPAR ALL"
                java -jar "$COMPAR_JAR" \
                  -sample_id_file "$SAMPLE_ID_FILE" \
                  -categories "ALL" \
                  -match_level "DETAILED" \
                  -driver_gene_panel "$DRIVER_GENE_PANEL" \
                  -sample_dir_ref "$RENAMED_TRUTH_RUNS_DIR/*" \
                  -sample_dir_new "$RENAMED_TARGET_RUNS_DIR/*" \
                  -somatic_unfiltered_vcf_ref "$RENAMED_TRUTH_RUNS_DIR/*/sage_somatic/*.sage.somatic.vcf.gz" \
                  -somatic_unfiltered_vcf_new "$RENAMED_TARGET_RUNS_DIR/*/sage_somatic/*.sage.somatic.vcf.gz" \
                  -output_dir "$COMPAR_ALL_OUTPUT_DIR" \
                  -output_id "$OUTPUT_ID" \
                  -log_debug \
                  -threads 16 \
                  $OPTIONAL_ARGS || echo [ERROR] "COMPAR ALL failed"
            fi

            echo [INFO] "Finished running COMPAR"
        }

        symlink_runs_to_tumor_name() {
            local RUN_INPUT_DIR=$1 && shift
            local RUN_OUTPUT_DIR=$1 && shift

            [[ -n "$RUN_OUTPUT_DIR" ]] || echo [ERROR] "Missing arguments for symlink_runs_to_tumor_name"

            for RUN_DIR in "$RUN_INPUT_DIR"/*/; do
                local TUMOR_SAMPLE
                TUMOR_SAMPLE=$(load_tumor_sample_from_metadata "$RUN_DIR") || echo [ERROR] "Could not get tumor sample name from $RUN_DIR"
                local RENAMED_RUN_DIR="$RUN_OUTPUT_DIR/$TUMOR_SAMPLE"
                if [[ -d "$RENAMED_RUN_DIR" ]]; then
                    echo [WARN] "SKIP copying of $RUN_DIR since $RENAMED_RUN_DIR exists"
                else
                    echo [INFO] "Copy $RUN_DIR to $RENAMED_RUN_DIR"
                    ln -s "$RUN_DIR" "$RENAMED_RUN_DIR" || echo [ERROR] "Could not symlink $RUN_DIR to $RENAMED_RUN_DIR"
                fi
            done
        }

        load_tumor_sample_from_metadata() {
            local RUN_DIR=$1
            local METADATA="$RUN_DIR/metadata.json"
            local TUMOR_SAMPLE=$(jq -r '.tumor.sampleName' $METADATA)
            echo "$TUMOR_SAMPLE"
        }

        create_dir() {
            local DIRECTORY=$1 && shift

            [[ -n "$DIRECTORY" ]] || echo [ERROR] "Cannot create dir with empty name"

            if [[ ! -d "$DIRECTORY" ]]; then
                echo [INFO] "Create dir: $DIRECTORY"
                mkdir -p "$DIRECTORY" || echo [ERROR] "Could not create dir: $DIRECTORY"
            fi
        }

        main "$@" || echo [ERROR] "compar execution failed"
        
        # Copy COMPAR outputs to /tmp/output so that hawe can transfer them.
        cp -r "$OUTPUT_DIR" /out/
        
        echo "COMPAR execution completed"
    options:
      backoffLimit: 2
      annotations:
        gke-gcsfuse/ephemeral-storage-request: 400Gi # Can be optimized?
      stageTimeoutMinutes: 120
      resources:
        requests:
          cpu: 16
          memory: 32Gi 
          storage: 400Gi # Can be optimized?
      node:
        spot: true
        pool: "n2d-standard-32-pool-2"
    inputStages:
      - truth_bucket
      - target_bucket

  - name: "excel-compar"
    image: "europe-west4-docker.pkg.dev/hmf-build/hmf-docker-crunch/auto-compare"
    version: "0.0.5"
    command: "bash /config/run.sh"
    configFiles:
      run.sh: |
        #!/usr/bin/env bash
        set -eo pipefail

        WORK_DIR="/tmp/work"
        mkdir -p $WORK_DIR
        TRUTH_BUCKET="/in/truth_bucket"

        COMPAR_INPUT_DIR="/in/execute-compar/compar_${run_id}/reported"
        OUTPUT_FILE="$WORK_DIR/compar_output.xlsx"

        touch $OUTPUT_FILE

        echo "[$(date +"%Y-%m-%dT%H:%M:%S")] Starting Excel conversion stage"
        echo "Input directory: $COMPAR_INPUT_DIR"
        echo "Output Excel file: $OUTPUT_FILE"

        python3 /scripts/create_excel_compar.py "$COMPAR_INPUT_DIR" "$OUTPUT_FILE" "$TRUTH_BUCKET"

        # Copy the Excel file to /tmp/output for transfer.
        cp "$OUTPUT_FILE" /out/

        echo "[$(date +"%Y-%m-%dT%H:%M:%S")] Finished Excel conversion stage"
    options:
      backoffLimit: 2
      annotations:
        gke-gcsfuse/ephemeral-storage-request: 50Gi
      stageTimeoutMinutes: 60
      resources:
        requests:
          cpu: 8
          memory: 16Gi
          storage: 50Gi
      node:
        spot: true
        pool: "n2d-standard-16-pool-1"
    inputStages:
      - execute-compar
      - truth_bucket

  - name: "retrieve-output"
    image: "europe-west4-docker.pkg.dev/hmf-build/hmf-docker-crunch/auto-compare"
    version: "0.0.5"
    command: "bash /config/run.sh"
    configFiles:
      run.sh: |
        #!/usr/bin/env bash
        set -eo pipefail

        WORK_DIR="/tmp/work"
        mkdir -p $WORK_DIR
        RUN_ID=${run_id}

        COMPAR_BASE_DIR="/in/execute-compar/compar_${run_id}"
        COMPAR_DIR="$COMPAR_BASE_DIR/reported"
        # Mount the truth_bucket and target_bucket directly.
        REF_DIR="/in/truth_bucket/"
        NEW_DIR="/in/target_bucket/"
        OUTPUT_FILE="$WORK_DIR/extracted_output.tsv"

        echo "[$(date +"%Y-%m-%dT%H:%M:%S")] Starting output extraction..."
        echo "COMPAR_DIR: $COMPAR_DIR"
        echo "REF_DIR: $REF_DIR"
        echo "NEW_DIR: $NEW_DIR"
        echo "Output file: $OUTPUT_FILE"

        # --- Dynamically determine the v6 flag based on pipeline version ---
        # Take the first directory from REF_DIR.
        SAMPLE_DIR=$(find "$REF_DIR" -mindepth 1 -maxdepth 1 -type d | head -n 1)
        if [ -z "$SAMPLE_DIR" ]; then
            echo "No sample directory found in REF_DIR: $REF_DIR"
            exit 1
        fi

        # Set the full path to run.log in the sample directory.
        SAMPLE_LOG_FILE="$SAMPLE_DIR/run.log"
        echo "Using run log file: $SAMPLE_LOG_FILE"

        # Extract the pipeline version from the run.log file.
        PIPELINE_VERSION=$(grep "Version of pipeline5 is" "$SAMPLE_LOG_FILE" | sed -n 's/.*\[\(.*\)\].*/\1/p')
        echo "Extracted pipeline version: $PIPELINE_VERSION"
        MAJOR_VERSION=$(echo "$PIPELINE_VERSION" | cut -d. -f1)
        if [[ "$MAJOR_VERSION" -ge 6 ]]; then
            V6_FLAG="--v6"
        else
            V6_FLAG=""
        fi
        echo "Using V6 flag: $V6_FLAG"

        python3 /scripts/extract_pipeline_output.py \
          --compar_dir "$COMPAR_DIR" \
          --ref_dir "$REF_DIR" \
          --new_dir "$NEW_DIR" \
          --output_file "$OUTPUT_FILE" \
          $V6_FLAG

        OUTPUT_FILE_MUTATION="$WORK_DIR/extracted_output_mutation.tsv"
        OUTPUT_FILE_DISRUPTION="$WORK_DIR/extracted_output_disruption.tsv"
        OUTPUT_FILE_CNV="$WORK_DIR/extracted_output_cnv.tsv"

        cp "$OUTPUT_FILE_MUTATION" /out/
        cp "$OUTPUT_FILE_DISRUPTION" /out/
        cp "$OUTPUT_FILE_CNV" /out/

        echo "[$(date +"%Y-%m-%dT%H:%M:%S")] Output extraction completed."
    options:
      backoffLimit: 2
      annotations:
        gke-gcsfuse/ephemeral-storage-request: 50Gi # Can be optimized?
      stageTimeoutMinutes: 180
      resources:
        requests:
          cpu: 16
          memory: 32Gi 
          storage: 50Gi # Can be optimized?
      node:
        spot: true
        pool: "n2d-standard-32-pool-1"
    inputStages:
      - execute-compar
      - truth_bucket
      - target_bucket

  - name: "igv-visualize"
    image: "europe-west4-docker.pkg.dev/hmf-build/hmf-docker-crunch/auto-compare"
    version: "0.0.5"
    command: "bash /config/run.sh"
    configFiles:
      run.sh: |
        #!/usr/bin/env bash
        set -eo pipefail

        WORK_DIR="/tmp/work"
        RUN_ID=${run_id}

        OUTPUT_DIR="$WORK_DIR/compar_$RUN_ID"
        
        echo "Launching IGV visualization based on output in $OUTPUT_DIR"
        # TODO: Implement IGV visualization steps here
        
        echo "IGV visualization stage completed"
        # cp [any IGV output files] /out/
    options:
      backoffLimit: 2
      annotations:
        gke-gcsfuse/ephemeral-storage-request: 5Gi
      stageTimeoutMinutes: 60
      resources:
        requests:
          cpu: 8
          memory: 4Gi
          storage: 5Gi
      node:
        spot: true
        pool: "n2d-standard-16-pool-1"
    inputStages:
      - execute-compar