name: "auto-compare"
version: "0.2.7"
storagePath: "gs://auto-compare-output"
externalInputs:
  - name: truth-bucket
    location: "${truth_bucket_uri}"
  - name: target-bucket
    location: "${target_bucket_uri}"
  - name: sample-id-bucket
    location: "gs://auto-compare-output/sample_id_files/"
stages:
  - name: "execute-compar"
    image: "europe-west4-docker.pkg.dev/hmf-build/hmf-docker-crunch/auto-compare"
    version: "0.1.2"
    command: "bash /config/run.sh"
    configFiles:
      run.sh: |
        #!/usr/bin/env bash
        set -eo pipefail

        # Internal working variables; external variables are referenced as ${run_id}, etc.
        WORK_DIR="/tmp/work"
        TRUTH_BUCKET="/in/truth-bucket"
        TARGET_BUCKET="/in/target-bucket"
        RUN_ID=${run_id}
        REF_VERSION=${ref_version}
        OPTIONAL_ARGS='${compar_optional_arguments}'
        read -r -a OPTIONAL_ARGS_ARRAY <<< "$OPTIONAL_ARGS"
        SAMPLE_LINK='${sample_link}'
        SAMPLE_ID_CSV_URI='/in/sample-id-bucket/${sample_id_file_name}'

        # Additional parameters
        COMPAR_JAR="compar.jar"  # This jar is included in the Docker image.
        
        # Select the driver gene panel based on the reference version.
        if [ "$REF_VERSION" == "37" ]; then
            DRIVER_GENE_PANEL="/data/resources/gene_panel/DriverGenePanel.37.tsv"
        elif [ "$REF_VERSION" == "38" ]; then
            DRIVER_GENE_PANEL="/data/resources/gene_panel/DriverGenePanel.38.tsv"
        else
            echo "Unsupported ref_version: $REF_VERSION"
            exit 1
        fi

        # Derive internal paths based on external inputs
        BASE_DIR="$WORK_DIR"
        TRUTH_INPUT_DIR="$TRUTH_BUCKET"
        TARGET_INPUT_DIR="$TARGET_BUCKET"
        OUTPUT_DIR="$BASE_DIR/compar_$RUN_ID"
        OUTPUT_ID="$RUN_ID"

        echo "[$(date +"%Y-%m-%dT%H:%M:%S")] Starting COMPAR with RUN_ID: $RUN_ID"
        echo "BASE_DIR: $BASE_DIR"
        echo "TRUTH_INPUT_DIR: $TRUTH_INPUT_DIR"
        echo "TARGET_INPUT_DIR: $TARGET_INPUT_DIR"
        echo "OUTPUT_DIR: $OUTPUT_DIR"
        echo "Using driver gene panel: $DRIVER_GENE_PANEL"
        echo "Optional compar arguments: ${OPTIONAL_ARGS_ARRAY[@]}"
        echo "Sample list json: $SAMPLE_LINK"
        echo "External sample_id.csv: ${SAMPLE_ID_CSV_URI:-<none>}"

        main() {
            create_dir "$OUTPUT_DIR"

            # rename truth/target runs to tumor-sample names
            RENAMED_TRUTH_RUNS_DIR="$OUTPUT_DIR/truth";  create_dir "$RENAMED_TRUTH_RUNS_DIR"
            symlink_runs_to_tumor_name "$TRUTH_INPUT_DIR"  "$RENAMED_TRUTH_RUNS_DIR"

            RENAMED_TARGET_RUNS_DIR="$OUTPUT_DIR/target"; create_dir "$RENAMED_TARGET_RUNS_DIR"
            symlink_runs_to_tumor_name "$TARGET_INPUT_DIR" "$RENAMED_TARGET_RUNS_DIR"

            # SAMPLE_ID_FILE logic
            if [[ -n "${sample_id_file_name}" && "${sample_id_file_name}" != "{}" ]]; then
                echo "[INFO] Using provided sample_id.csv from \$sample_id_csv_uri"
                SAMPLE_ID_FILE="$SAMPLE_ID_CSV_URI"
            else
                SAMPLE_ID_FILE="$OUTPUT_DIR/sample_ids.csv"
                build_sample_id_csv   # only runs when user didn't supply a file
            fi
            echo "[INFO] sample_id.csv â†’ $SAMPLE_ID_FILE"
            cat "$SAMPLE_ID_FILE"

            run_compar "reported" "REPORTABLE"
            run_compar "all"      "DETAILED"

            echo "[INFO] COMPAR done"
        }

        build_sample_id_csv() {
            echo "[INFO] Building sample_id.csv"
            echo "SampleId,GermlineSampleId,RefSampleId,RefGermlineSampleId,NewSampleId,NewGermlineSampleId" >"$SAMPLE_ID_FILE"

            if [[ -n "${sample_id_file_name}" && "${sample_id_file_name}" != "{}" ]]; then
                # use provided mapping
                echo "$SAMPLE_LINK" | jq -c 'to_entries[]' | while read -r e; do
                TRUTH_ID=$(echo "$e" | jq -r '.key')
                TRUTH_DIR=$(find "$RENAMED_TRUTH_RUNS_DIR" -maxdepth 1 -name "$TRUTH_ID*" | head -n1) || continue
                echo "$e" | jq -r '.value[]' | while read -r TARGET_ID; do
                    TARGET_DIR=$(find "$RENAMED_TARGET_RUNS_DIR" -maxdepth 1 -name "$TARGET_ID*" | head -n1) || continue
                    write_csv_row "$TRUTH_DIR" "$TARGET_DIR"
                done
                done
            else
                # auto mapping
                for TRUTH_DIR in "$RENAMED_TRUTH_RUNS_DIR"/*/; do
                TARGET_DIR="$RENAMED_TARGET_RUNS_DIR/$(basename "$TRUTH_DIR")"
                [[ -d "$TARGET_DIR" ]] || { echo "[WARN] Missing target for $(basename "$TRUTH_DIR")"; continue; }
                write_csv_row "$TRUTH_DIR" "$TARGET_DIR"
                done
            fi
            }

        write_csv_row() {
            local TD=$1; local ND=$2
            local TRUTH_MD="$TD/metadata.json";   local TARGET_MD="$ND/metadata.json"
            [[ -f "$TRUTH_MD" && -f "$TARGET_MD" ]] || { echo "[WARN] metadata.json missing"; return; }

            local TT TR TR2 NT NR
            TT=$(jq -r '.tumor.sampleName'     "$TRUTH_MD")
            TR=$(jq -r '.reference.sampleName' "$TRUTH_MD"); [[ "$TR" == "null" || -z "$TR" ]] && TR=$TT
            NT=$(jq -r '.tumor.sampleName'     "$TARGET_MD")
            NR=$(jq -r '.reference.sampleName' "$TARGET_MD"); [[ "$NR" == "null" || -z "$NR" ]] && NR=$NT

            echo "$TT,$TT,$TT,$TR,$NT,$NR" >>"$SAMPLE_ID_FILE"
        }
        
        run_compar() {
            local MODE_DIR="$OUTPUT_DIR/$1"; local MATCH="$2"
            [[ -d "$MODE_DIR" ]] && { echo "[WARN] Skip $1 (exists)"; return; }

            create_dir "$MODE_DIR"
            echo "[INFO] COMPAR $1"
            java -jar "$COMPAR_JAR" \
                -sample_id_file "$SAMPLE_ID_FILE" \
                -categories "ALL" \
                -match_level "$MATCH" \
                -driver_gene_panel "$DRIVER_GENE_PANEL" \
                -sample_dir_ref "$RENAMED_TRUTH_RUNS_DIR/*" \
                -sample_dir_new "$RENAMED_TARGET_RUNS_DIR/*" \
                -somatic_unfiltered_vcf_ref "$RENAMED_TRUTH_RUNS_DIR/*/sage_somatic/*.sage.somatic.vcf.gz" \
                -somatic_unfiltered_vcf_new "$SOMATIC_UNFILTERED_VCF_NEW" \
                -output_dir "$MODE_DIR" \
                -output_id "$OUTPUT_ID" \
                -log_debug \
                -threads 16 \
                "${OPTIONAL_ARGS_ARRAY[@]}"
        }

        symlink_runs_to_tumor_name() {
            local RUN_INPUT_DIR=$1 && shift
            local RUN_OUTPUT_DIR=$1 && shift

            [[ -n "$RUN_OUTPUT_DIR" ]] || echo "[ERROR] Missing arguments for symlink_runs_to_tumor_name"

            for RUN_DIR in "$RUN_INPUT_DIR"/*/; do
                local TUMOR_SAMPLE
                TUMOR_SAMPLE=$(load_tumor_sample_from_metadata "$RUN_DIR") || echo "[ERROR] Could not get tumor sample name from $RUN_DIR"
                local RENAMED_RUN_DIR="$RUN_OUTPUT_DIR/$TUMOR_SAMPLE"
                if [[ -d "$RENAMED_RUN_DIR" ]]; then
                    echo "[WARN] SKIP copying of $RUN_DIR since $RENAMED_RUN_DIR exists"
                else
                    echo "[INFO] Copy $RUN_DIR to $RENAMED_RUN_DIR"
                    ln -s "$RUN_DIR" "$RENAMED_RUN_DIR" || echo "[ERROR] Could not symlink $RUN_DIR to $RENAMED_RUN_DIR"
                fi
            done
        }

        load_tumor_sample_from_metadata() {
            local RUN_DIR=$1
            local METADATA="$RUN_DIR/metadata.json"
            local TUMOR_SAMPLE=$(jq -r '.tumor.sampleName' $METADATA)
            echo "$TUMOR_SAMPLE"
        }

        create_dir() {
            local DIRECTORY=$1 && shift

            [[ -n "$DIRECTORY" ]] || echo [ERROR] "Cannot create dir with empty name"

            if [[ ! -d "$DIRECTORY" ]]; then
                echo [INFO] "Create dir: $DIRECTORY"
                mkdir -p "$DIRECTORY" || echo [ERROR] "Could not create dir: $DIRECTORY"
            fi
        }

        main "$@" || echo [ERROR] "compar execution failed"
        
        # Copy COMPAR outputs to /tmp/output so that hawe can transfer them.
        cp -r "$OUTPUT_DIR" /out/
        
        echo "COMPAR execution completed"
    options:
      backoffLimit: 2
      annotations:
        gke-gcsfuse/ephemeral-storage-request: 400Gi # Can be optimized?
      stageTimeoutMinutes: 120
      resources:
        requests:
          cpu: 16
          memory: 32Gi 
          storage: 400Gi # Can be optimized?
      node:
        spot: true
        pool: "n2d-standard-32-pool-2"
    inputStages:
      - truth-bucket
      - target-bucket
      - sample-id-bucket

  - name: "excel-compar"
    image: "europe-west4-docker.pkg.dev/hmf-build/hmf-docker-crunch/auto-compare"
    version: "0.1.2"
    command: "bash /config/run.sh"
    configFiles:
      run.sh: |
        #!/usr/bin/env bash
        set -eo pipefail

        WORK_DIR="/tmp/work"
        mkdir -p $WORK_DIR
        TRUTH_BUCKET="/in/truth-bucket"

        COMPAR_INPUT_DIR="/in/execute-compar/compar_${run_id}/reported"
        OUTPUT_FILE="$WORK_DIR/compar_output.xlsx"

        touch $OUTPUT_FILE

        echo "[$(date +"%Y-%m-%dT%H:%M:%S")] Starting Excel conversion stage"
        echo "Input directory: $COMPAR_INPUT_DIR"
        echo "Output Excel file: $OUTPUT_FILE"

        python3 /scripts/create_excel_compar.py "$COMPAR_INPUT_DIR" "$OUTPUT_FILE"

        # Copy the Excel file to /tmp/output for transfer.
        cp "$OUTPUT_FILE" /out/

        echo "[$(date +"%Y-%m-%dT%H:%M:%S")] Finished Excel conversion stage"
    options:
      backoffLimit: 2
      annotations:
        gke-gcsfuse/ephemeral-storage-request: 50Gi
      stageTimeoutMinutes: 60
      resources:
        requests:
          cpu: 8
          memory: 16Gi
          storage: 50Gi
      node:
        spot: true
        pool: "n2d-standard-16-pool-1"
    inputStages:
      - execute-compar
      - truth-bucket