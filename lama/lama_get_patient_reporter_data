#!/usr/bin/env bash

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error when substituting.
set -o pipefail # The return value of a pipeline is the status of the last command to exit.

if [[ $# -eq 0 ]]; then
    echo "ERROR: No tumor barcode ID passed to script. Exiting" >&2
    exit 1
fi
tumor_barcode=$1

if [[ -z "${tumor_barcode}" ]]; then
    echo "ERROR: Tumor barcode ID is empty. Exiting" >&2
    exit 1
fi

echo "INFO: Tumor Barcode: ${tumor_barcode}"

# --- 1. Query Hartwig API /runs endpoint ---
echo "INFO: Querying Hartwig API for 'Validated' runs with barcode ${tumor_barcode}..."
hartwig_api_url="http://api.prod-1/hmf/v1/runs?barcode=${tumor_barcode}"
# We fetch all runs for the barcode, then filter by status and startTime in jq
hartwig_response=$(curl --fail -s -L "${hartwig_api_url}")

if [[ -z "${hartwig_response}" ]]; then
    echo "ERROR: Hartwig API returned an empty response for barcode ${tumor_barcode}." >&2
    echo "ERROR: Attempted URL: ${hartwig_api_url}" >&2
    exit 1
fi

# --- 2. Extract ref_isolation_barcode from the latest 'Validated' run (by Run's startTime) ---
# This jq command:
# - Filters for runs where status is "Validated" AND startTime is not null/empty.
# - Sorts these runs by startTime.
# - Takes the last run (latest 'Validated' run).
# - Extracts its set.ref_isolation_barcode.
# - If any step fails to find data, it defaults to an empty string.
ref_isolation_barcode=$(echo "${hartwig_response}" | jq -r '
    [
      .[] |
      select(
        .status == "Validated" and
        .startTime != null and .startTime != "" # Ensure startTime is present and not an empty string
      )
    ] |
    sort_by(.startTime) |
    if length > 0 then
      .[-1].set.ref_isolation_barcode // ""  # Use snake_case for JSON key, default to "" if null
    else
      "" # No 'Validated' runs with valid startTime found
    end
')

if [[ -z "${ref_isolation_barcode}" ]]; then
    echo "WARNING: Could not find a 'ref_isolation_barcode' from the latest 'Validated' Hartwig API run for tumor barcode ${tumor_barcode}." >&2
    echo "WARNING: This could be because no 'Validated' runs were found, no such runs had a 'startTime', or the latest valid run lacked a 'ref_isolation_barcode'." >&2

    # Ask user if they want to continue
    read -r -p "No reference sample barcode found. Do you want to continue with only the tumor barcode? (y/N): " choice
    case "$choice" in
      y|Y )
        echo "INFO: Proceeding with only the tumor barcode as per user confirmation."
        # ref_isolation_barcode is already empty, so LAMA call will be tumor-only
        ;;
      * ) # Anything else, including just pressing Enter (which defaults to No)
        echo "INFO: User chose not to continue. Exiting."
        exit 0 # Graceful exit as it's a user choice
        ;;
    esac
else
    echo "INFO: Found Reference Isolation Barcode from latest 'Validated' run: ${ref_isolation_barcode}"
fi

# --- 3. Query LAMA API ---
lama_api_url_base="http://lama.prod-1/api/queries/patient-reporter"
lama_query_params="tumor-isolation-barcode=${tumor_barcode}"

if [[ -n "${ref_isolation_barcode}" ]]; then
    lama_query_params+="&reference-isolation-barcode=${ref_isolation_barcode}"
fi

final_lama_url="${lama_api_url_base}?${lama_query_params}"
echo "INFO: Querying LAMA API: ${final_lama_url}"

# Perform the LAMA API call and pretty-print JSON output
lama_response=$(curl -s -L "${final_lama_url}") # No --fail, to allow jq to process potential JSON error bodies from LAMA
curl_lama_exit_code=$?

# Check if curl itself failed (network error, etc.) or if the response is empty
if [[ ${curl_lama_exit_code} -ne 0 ]]; then
    echo "ERROR: LAMA API request with curl failed. Exit code: ${curl_lama_exit_code}" >&2
    echo "ERROR: Attempted URL: ${final_lama_url}" >&2
    echo "ERROR: Response (if any): ${lama_response}" >&2 # lama_response might contain error details or be empty
    exit 1
elif [[ -z "${lama_response}" ]]; then
    echo "ERROR: LAMA API returned an empty response." >&2
    echo "ERROR: Attempted URL: ${final_lama_url}" >&2
    exit 1
fi

echo "INFO: LAMA Response:"
echo "${lama_response}" | jq .
jq_exit_code=$?

if [[ ${jq_exit_code} -ne 0 ]]; then
    echo "ERROR: Failed to parse LAMA API response with jq. Exit code: ${jq_exit_code}" >&2
    echo "ERROR: Raw LAMA response was:" >&2
    echo "${lama_response}" >&2
    exit 1
fi