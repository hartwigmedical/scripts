#!/usr/bin/env bash
set -e

source message_functions || exit 1

CODEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CALC_YIELD_SCRIPT="${CODEDIR}/../utilityscripts/get_yield_from_read_count_and_excluded_base_percentage.py"

REF_TARGET_YIELD=100
TUM_TARGET_YIELD=300

ADD_YIELD_NOT_APPLICABLE="NA"
NA="na"
REF_COV_MINIMUM_REQUIREMENT=26

ID_ARG="id"

yymmdd=$(date +'%y%m%d')
tmp_file="/tmp/shallowseq_results_${yymmdd}.tsv.tmp"

main() {
  first_arg=$1
  set_names=("$@")

  if [[ ${#set_names[@]} -eq 0 || $1 == "-h" || $1 == "--help" ]]; then
      echo "---"
      echo "           Usage: $(basename "$0") <set-name> [<set-name-2> <set-name-N>]"
      echo "              Eg: $(basename "$0") 210101_ShallowSeq_A_B_C"
      echo " Alternate usage: $(basename "$0") id <run-id> [<run-id-2> <run-id-N>]"
      echo "---"
      exit 1
  fi

  info "Writing results to ${tmp_file}"
  echo -e "Seq?\tAddR\tAddT\tSetName\tTumSample\tPurpleQC\tPurity\tStatus\tAmberQC\tPipelineVsn\tPurpleVsn\
  \tRefCov\tTumCov\tRefReads\tTumReads\tRefMapPerc\tTumMapPerc\tRefExcl\tTumExcl\tRefDup\tTumDup" > "${tmp_file}"

  for set_name in "${set_names[@]}"; do
      if [[ "${set_name}" == "${ID_ARG}" ]]; then
          continue
      fi

      # retrieve run info from API
      if [[ "${first_arg}" == "${ID_ARG}" ]]; then
          run_json=$(hmf_api_get "runs/${set_name}") || die "Unable to retrieve run info from API by id (${set_name})"
      else
          run_json=$(hmf_api_get "runs?set_name=${set_name}" | jq -c '.[-1]') || die "Unable to retrieve run info from API (${set_name})"
      fi

      print_shallow_qc_for_run "${run_json}" || die "Could not print shallow qc for run for set '${set_name}'"
  done
}

print_shallow_qc_for_run() {
    local run_json=$1 && shift

    if [[ -z ${run_json} ]]; then
        die "Not enough arguments for ${FUNCNAME[0]}: ${run_json}"
    fi

    local ref_sample=${NA}; local ref_cov=${NA}; local ref_rds=${NA}; local ref_map=${NA}; local ref_exc=${NA}
    local ref_dup=${NA}; local tum_sample=${NA}; local tum_cov=${NA}; local tum_rds=${NA}; local tum_map=${NA}
    local tum_exc=${NA}; local tum_dup=${NA}; local purity=${NA}; local status=${NA}; local qc_stat=${NA}
    local amb_qc=${NA}; local pur_vsn=${NA}; local pip_vsn=${NA}; local set_name="${NA}"

    pip_vsn=$(jq -r '.version' <<< "${run_json}")
    bucket=$(jq -r '.bucket' <<< "${run_json}")
    ref_sample=$(jq -r '.set.ref_sample' <<< "${run_json}")
    tum_sample=$(jq -r '.set.tumor_sample' <<< "${run_json}")
    set_name=$(jq -r '.set.name' <<< "${run_json}")
    run_url="gs://${bucket}/${set_name}"

    metadata_json=$(gsutil cat ${run_url}/metadata.json || die "Unable to retrieve metadata info from (${run_url})")
    ref_reporting_id=$(jq -r '.reference.sampleName' <<< "${metadata_json}")
    tum_reporting_id=$(jq -r '.tumor.sampleName' <<< "${metadata_json}")

    amb_dir="${run_url}/amber"
    pur_dir="${run_url}/purple"
    ref_dir="${run_url}/${ref_reporting_id}"
    tum_dir="${run_url}/${tum_reporting_id}"

    aqc_file="${amb_dir}/${tum_reporting_id}.amber.qc"
    vsn_file="${pur_dir}/purple.version"
    pqc_file="${pur_dir}/${tum_reporting_id}.purple.qc"
    ppu_file="${pur_dir}/${tum_reporting_id}.purple.purity.tsv"

    wgs_file_r="${ref_dir}/bam_metrics/${ref_reporting_id}.wgsmetrics"
    wgs_file_t="${tum_dir}/bam_metrics/${tum_reporting_id}.wgsmetrics"
    flg_file_r="${ref_dir}/flagstat/${ref_reporting_id}.flagstat"
    flg_file_t="${tum_dir}/flagstat/${tum_reporting_id}.flagstat"

    ## gather file contents
    wgs_file_r_content=$(gsutil cat "${wgs_file_r}" | grep -A1 GENOME_T)
    wgs_file_t_content=$(gsutil cat "${wgs_file_t}" | grep -A1 GENOME_T)
    flg_file_r_content=$(gsutil cat "${flg_file_r}")
    flg_file_t_content=$(gsutil cat "${flg_file_t}")

    aqc_file_content=$(gsutil cat "${aqc_file}")
    vsn_file_content=$(gsutil cat "${vsn_file}")
    ppu_file_content=$(gsutil cat "${ppu_file}")
    pqc_file_content=$(gsutil cat "${pqc_file}")

    ## gather all metrics
    head=$(echo "${wgs_file_r_content}" | grep GENOME_T)
    ref_val=$(echo "${wgs_file_r_content}" | tail -1)
    tum_val=$(echo "${wgs_file_t_content}" | tail -1)
    ref_jsn=$(perl -e "use JSON::XS; @h = split(' ', \"${head}\"); @v = split(' ', \"${ref_val}\"); %m = (); @m{@h} = @v; print encode_json \%m;")
    tum_jsn=$(perl -e "use JSON::XS; @h = split(' ', \"${head}\"); @v = split(' ', \"${tum_val}\"); %m = (); @m{@h} = @v; print encode_json \%m;")

    ref_cov=$(echo "${ref_jsn}" | jq -r '.MEAN_COVERAGE')
    ref_exc=$(echo "${ref_jsn}" | jq -r '.PCT_EXC_TOTAL')
    ref_dup=$(echo "${ref_jsn}" | jq -r '.PCT_EXC_DUPE')
    tum_cov=$(echo "${tum_jsn}" | jq -r '.MEAN_COVERAGE')
    tum_exc=$(echo "${tum_jsn}" | jq -r '.PCT_EXC_TOTAL')
    tum_dup=$(echo "${tum_jsn}" | jq -r '.PCT_EXC_DUPE')

    ## gather Flagstat info
    ref_rds=$(echo "${flg_file_r_content}" | grep 'total ('  | cut -d ' ' -f1)
    tum_rds=$(echo "${flg_file_t_content}" | grep 'total ('  | cut -d ' ' -f1)
    ref_map=$(echo "${flg_file_r_content}" | grep 'mapped (' | cut -d '(' -f2 | cut -d":" -f1 | tr -d '[:space:]')
    tum_map=$(echo "${flg_file_t_content}" | grep 'mapped (' | cut -d '(' -f2 | cut -d":" -f1 | tr -d '[:space:]')

    ## gather Amber info
    amb_qc=$(echo "${aqc_file_content}" | grep QCStatus | cut -f2)

    ## gather Purple info
    pur_vsn=$(echo "${vsn_file_content}" | grep version | cut -d"=" -f2)
    purity=$(echo "${ppu_file_content}" | tail -1 | cut -f1)
    status=$(echo "${ppu_file_content}" | tail -1 | cut -f7)
    qc_stat=$(echo "${pqc_file_content}" | grep QCStatus | cut -f2)

    ## calculate yield to add in GBase
    ref_add_yield=$(get_add_yield "${REF_TARGET_YIELD}" "${ref_rds}" "${ref_exc}") \
            || die "Could not determine REF yield to add for run for set ${set_name}"
    if [[ ${ref_cov%%.*} -gt ${REF_COV_MINIMUM_REQUIREMENT} ]]; then
        # Already has enough yield
        ref_add_yield="${ADD_YIELD_NOT_APPLICABLE}"
    fi
    tum_add_yield=$(get_add_yield "${TUM_TARGET_YIELD}" "${tum_rds}" "${tum_exc}") \
            || die "Could not determine TUM yield to add for run for set ${set_name}"

    ## Determine full sequencing status
    purity_check=$(echo "${purity} >= 0.2"| bc -l)
    tum_cov_check=$(echo "${tum_cov} >= 8.0"| bc -l)
    ref_cov_check=$(echo "${ref_cov} >= 8.0"| bc -l)
    fails_check=$(echo "${qc_stat}" | sed 's/,/\n/g' | grep -v FAIL_NO_TUMOR | grep -c FAIL_)
    if [[ ${amb_qc} != *"FAIL"* ]] && [[ ${qc_stat} != *"FAIL"* ]] && [[ ${purity_check} -eq 1 ]]; then
        to_seq="yes"
    elif [[ ${amb_qc} != *"FAIL"* ]] && [[ ${fails_check} == 0 ]] && [[ ${purity_check} -eq 0 ]] && [[ ${tum_cov_check} -eq 1 && ${ref_cov_check} -eq 1 ]]; then
        to_seq="no"
    elif [[ ${amb_qc} != *"FAIL"* ]] && [[ ${fails_check} == 0 ]] && [[ ${purity_check} -eq 0 ]] && [[ ${tum_cov_check} -eq 0 || ${ref_cov_check} -eq 0 ]]; then
        warn "Sample set ${set_name} needs investigating, likely additional sequencing needed"
        to_seq="addseq"
    else
        warn "Sample set ${set_name} needs investigating"
        to_seq="else"
    fi

    echo "${set_name} ${to_seq} ${amb_qc}"

    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" \
        "${to_seq}" "${ref_add_yield}" "${tum_add_yield}" \
        "${set_name}" "${tum_sample}" "${qc_stat}" "${purity}" \
        "${status}" "${amb_qc}" "${pip_vsn}" "${pur_vsn}" "${ref_cov}" "${tum_cov}" \
        "${ref_rds}" "${tum_rds}" "${ref_map}" "${tum_map}" \
        "${ref_exc}" "${tum_exc}" "${ref_dup}" "${tum_dup}" >> "${tmp_file}"
}

get_add_yield() {
    local target_yield=$1 && shift
    local reads=$1 && shift
    local exc=$1 && shift

    if [[ -z ${exc} ]]; then
        die "Not enough arguments for ${FUNCNAME[0]}: ${target_yield}, ${reads}, ${exc}"
    fi

    if [[ ${exc:0:2} != "0." ]]; then
        die "Calculation only works if exc is between 0 and 1: exc=${exc}"
    fi

    # Calculation of current yield is ((1-exc) * reads * BASES_PER_READ / BASES_PER_GBASE)
    current_yield=$(python3 "${CALC_YIELD_SCRIPT}" --read_count "${reads}" --excluded_base_percentage "${exc}") || \
          die "Could not calculate current yield from read count ${reads} and exc ${exc}"

    add_yield=$(( target_yield-current_yield ))

    if [[ ${add_yield} -lt 0 ]]; then
        # Already has enough yield
        add_yield="${ADD_YIELD_NOT_APPLICABLE}"
    fi

    echo "${add_yield}"
}

main "$@"