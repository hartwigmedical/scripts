#!/usr/bin/env bash

source message_functions || exit 1

MIN_DAYS_CONVERTED=1
SERVERS=(sts1.prod-1 sts2.prod-1)
CRUNCH_TYPE='crunch'

[[ "$(hostname)" =~ ^crunch|sts ]] && die "Not supposed to check flowcells on crunch/sts directly"
[[ ! "$(hostname)" =~ ^ops ]] && die "Currently only to be executed at ops-vm"

main () {
    info "Starting cleanup check for flowcells"
    for server in "${SERVERS[@]}"; do
        type='sts'
        [[ "${server}" =~ ^crunch ]] && type="$CRUNCH_TYPE"
        info "Checking flowcells for ${server}"
        process_server "$server" "$type"
    done
}

function process_server () {
    local server=$1 && shift
    local type=$1 && shift

    local flowcells_to_process=()
    local search_dir="/data/flowcells"
    if [[ "$type" == "$CRUNCH_TYPE" ]]; then
        search_dir="/data1/illumina_data"
    fi
    while IFS=  read -r -d $'\0'; do
        flowcells_to_process+=("$REPLY")
    done < <(ssh "${server}" find "${search_dir}/" "${search_dir}/iseq" -mindepth 1 -maxdepth 1 -type d -not -name "TestRuns" -not -name "MyRun" -not -name "iseq" -print0)
    declare -a all_stdout
    for flowcell_path in "${flowcells_to_process[@]}"; do
        mapfile -t stdout < <(process_flowcell "$server" "$type" "$flowcell_path")
        all_stdout=( "${all_stdout[@]}" "${stdout[@]}" )
    done

    if [[ "${#all_stdout[@]}" -gt 0 ]]; then
        declare -a sorted_all_stdout
        IFS=$'\n' mapfile -t sorted_all_stdout < <(echo "${all_stdout[*]}" | xargs -n1 -d ' ' echo | sort); unset IFS

        echo ""
        info "Potential cleanup (SSH into $server and execute cmd below):"
        echo "  sudo -u sbsuser rm -r $(printf '%s ' "${sorted_all_stdout[@]}")"
        echo ""
    fi
}

function process_flowcell () {
    local server=$1 && shift
    local type=$1 && shift
    local flowcell_path=$1 && shift
    local flowcell_name=""
    flowcell_name=$(basename "${flowcell_path}")

    flowcell_id="${flowcell_name##*_}"
    if [[ ${flowcell_id} =~ [AB]H[A-Z0-9]{8} ]]; then
      # For NovaSeq and NextSeq strip the first letter, but not for Iseq.
      flowcell_id="${flowcell_id:1}"
    fi

    log_info="${flowcell_name}"
    api_flowcells=$(hmf_api_get "flowcells?flowcell_id=${flowcell_id}") || die "Unable to get flowcell from API [$flowcell_id]"

    api_flowcell_count=$(jq 'length' <<< "${api_flowcells}")
    if [[ "${api_flowcell_count}" -ne 1 ]]; then
        warn "  $log_info: API count not exactly one" && return 0
    fi

    api_flowcell=$(jq '.[-1]' <<< "${api_flowcells}")
    flowcell_status_in_api=$(jq -r '.status' <<< "${api_flowcell}")
    flowcell_qc_in_api=$(jq -r '.undet_rds_p_pass' <<< "${api_flowcell}")
    convert_date_in_api=$(jq -r '.convertTime' <<< "${api_flowcell}")

    if [[ "${flowcell_status_in_api}" != "Converted" ]]; then
        warn "  $log_info: API status is not Converted [$flowcell_status_in_api]" && return 0
    fi

    if [[ "${flowcell_qc_in_api}" != "true" ]]; then
        warn "  $log_info: API qc status is not true [$flowcell_qc_in_api]" && return 0
    fi

    if [[ ! "${convert_date_in_api}" =~ ^[[:digit:]]+ ]]; then
        warn "  $log_info: convertDate in api does not contain digits somehow" && return 0
    fi

    days=$(( ($(date +%s) - $(date -d "${convert_date_in_api}" +%s) )/(60*60*24) ))
    if [[ "${days}" -le "${MIN_DAYS_CONVERTED}" ]]; then
        warn "  $log_info: uploaded and converted (but only $days days ago)" && return 0
    fi

    warn "  $log_info: uploaded and converted $days days ago so added to cleanup list"
    echo "$flowcell_path"
}

main