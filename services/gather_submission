#!/usr/bin/env bash

source message_functions || exit 1

SUBMISSIONS_DIR="/data/submissions"

submission=$1

if [[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]] ; then echo " Usage: $0 HMFreg0000"; exit 1; fi
[[ -n "${submission}" ]] || die "Missing submission id as input"
[[ "${submission}" =~ ^HMFreg[0-9]{4} ]] || die "Submission is expected to match HMFreg[0-9]{4}"

# Setting up variables
out_path="${SUBMISSIONS_DIR}/${submission}"
log_file="${out_path}/log.txt"
date_string=$(date)

lims_file="${out_path}/lims.txt"
samp_file="${out_path}/samples.txt"
runs_file="${out_path}/runs.txt"
barc_file="${out_path}/barcodes.txt"
repo_file="${out_path}/report.txt"
subm_json="${out_path}/submission.json"
lims_json="${lims_file/.txt/.json}"
samp_json="${samp_file/.txt/.json}"
runs_json="${runs_file/.txt/.json}"

# Create dirs
[[ ! -e "${out_path}" ]] || die "Output dir exists already (${out_path})"
mkdir -p "${out_path}" || die "Unable to create output dir (${out_path})"

# Gather submission info from LAB LIMS
info "Querying HMF LIMS to get submission info"
lims_submission_json=$(query_lims.pl -type submissions -filter "submission=${submission}" -json | jq --sort-keys '.[0]')
echo "${lims_submission_json}" > "${subm_json}"
p_name=$(jq -r '.project_name' <<< "${lims_submission_json}")
r_name=$(jq -r '.report_contact_name' <<< "${lims_submission_json}")
r_mail=$(jq -r '.report_contact_email' <<< "${lims_submission_json}")
d_name=$(jq -r '.data_contact_name' <<< "${lims_submission_json}")
d_mail=$(jq -r '.data_contact_email' <<< "${lims_submission_json}")
p_type=$(jq -r '.analysis_type' <<< "${lims_submission_json}")

[[ -n "${p_name}" ]] || die "Unable to find project for submission"

# Get all samples from LAB LIMS
info "Querying HMF LIMS to get sample list"
query_lims.pl -type samples -filter "submission=${submission}" > "${lims_file}"
query_lims.pl -type samples -filter "submission=${submission}" -json > "${lims_json}"

# Get sample info from HMF API
info "Querying HMF API to get sample status"
api samples "${submission}" submission > "${samp_file}"
api_samples_json=$(hmf_api_get "samples?submission=${submission}")

total_yield_gbase=$(echo "${api_samples_json}" | jq '[.[].yld] | add / 1000000000 | floor')
echo "${api_samples_json}" > "${samp_json}"

# Get run info from HMF API
info "Querying HMF API to get run status"
api runs "${submission}" set_name_contains > "${runs_file}"
api_runs_json=$(hmf_api_get "runs?set_name_contains=${submission}")
echo "${api_runs_json}" > "${runs_json}"

# Get counts to check completeness
hmf_count=$(grep -cv "^#" "${lims_file}" | cut -f2)
api_count=$(echo "${api_samples_json}" | jq -c '[.[] | select(.status=="Ready")] | length')

# Setup barcodes file
grep -v "^#" "${samp_file}" | cut -f2 > "${barc_file}"

# Setup reporting info
rm -f "${repo_file}"
pdf_name="${submission}_${p_name}.pdf"

printf '%s\n' "# Project metadata table for report (${pdf_name})" \
"${r_name}" "${r_mail}" "${d_mail}"  "${p_name}" "${submission}" \
"${api_count}" "${p_type}" "${total_yield_gbase} GBase" \
"" "# Sample table for report:" >> "${repo_file}"

{
    while read -r line; do
        subm=$(echo "${line}" | cut -f1)
        barc=$(echo "${line}" | cut -f2)
        q30M=$(echo "${line}" | cut -f3)
        yldR=$(echo "${line}" | cut -f4)
        yldM=$(echo "${line}" | cut -f5)
        name=$(echo "${line}" | cut -f6)
        date=$(jq -r ".[] | select( .sample_id == \"${barc}\" ) | .arrival_date" "${lims_json}")
        sops=$(jq -r ".[] | select( .sample_id == \"${barc}\" ) | .lab_sop_versions" "${lims_json}")
        q30M=$(printf "%'.1f\n" "${q30M}") # q30 with one decimal
        yldR=$(printf "%'.f\n" "$((yldR / 1000000))") # yield to MBase
        yldM=$(printf "%'.f\n" "$((yldM / 1000000))") # yield to MBase
        printf "%s\t" "${subm}" "${barc}" "${q30M}" "${yldR}" "${yldM}" "${name}" "${date}"
        printf "%s\n" "${sops}"
    done < <(echo "${api_samples_json}" | jq -rc '.[] | [.submission,.barcode,.q30,.yld_req,.yld,.name] | @tsv')
} >> "${repo_file}"

{
    echo "#           Date = ${date_string}"
    echo "#     Submission = ${submission}"
    echo "#        Project = ${p_name}"
    echo "#   Sample Count = ${hmf_count}"
    echo "#     Data Count = ${api_count}"
    echo "#    Yield GBase = ${total_yield_gbase}"
    echo "# Report Contact = ${r_name} (${r_mail})"
    echo "#   Data Contact = ${d_name} (${d_mail})"
} >> "${log_file}"

info "Inspect output files:"
info " cd ${out_path}"
info " cat ${log_file}"
info " cat ${lims_file}"
info " cat ${samp_file}"
info " cat ${runs_file}"
echo ""

info "And/or get the aria2 download config:"
echo " nohup gather_submission_aria_config ${submission} ${p_name} > ${out_path}/gather_aria.log &"
echo ""

info "And/or print info for (PDF) report:"
echo " cat ${repo_file}"
echo ""

info "And generate final test report (FILL IN your name!)"
echo " generate_final_test_report.py -i ${repo_file} -o ${out_path}/ -n 'Name'"
echo ""

info "And/or send mail, change settings as needed!"
echo " msg -s -t ss ${submission}"
echo ""

# Warn if not potentially complete
if [[ ${hmf_count} -ne ${api_count} ]]; then
    warn "Not all samples have status Ready (so FASTQ might be missing)!"
fi
