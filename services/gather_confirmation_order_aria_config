#!/usr/bin/env bash

source message_functions || exit 1

CREATE_ARIA_SCRIPT="create_aria2_config_by_set_name"

if [[ $# -ne 1 ]]; then echo "Usage: $(basename $0) DVO-001-001"; exit 1; fi

dvo=$1

submission_dir="/data/submissions/${dvo}"
output_dir="${submission_dir}/aria2"
tmp_dir="${output_dir}/tmp"
runs_json="${submission_dir}/runs.json"
create_job="${output_dir}/create_aria_configs.sh"
create_log="${output_dir}/create_aria_configs.log"
out_config="${output_dir}/${dvo}.aria.txt"
out_gcp_du="${output_dir}/${dvo}_disk_usage_gcp.txt"

if [[ ! -d "${submission_dir}" ]] ; then error "Submission dir does not exist (${submission_dir})"; fi
if [[ ! -w "${submission_dir}" ]] ; then error "Submission dir is not writable (${submission_dir})"; fi
if [[ ! -f "${runs_json}" ]] ; then error "Runs json does not exist (${runs_json})"; fi
if [[   -d "${output_dir}" ]] ; then error "Output dir already exists (${output_dir})"; fi

info "Creating aria output and tmp dir (${output_dir})"
mkdir "${output_dir}" || exit 1
mkdir "${tmp_dir}" || exit 1

info "Stepping into output dir (${output_dir})"
cd "${output_dir}" || exit 1

unvalidated_count=$(jq '[select(.[].status != "Validated")] | length' "${runs_json}")
if [[ "${unvalidated_count}" -gt 0 ]]; then
    warn "There are ${unvalidated_count} runs that will be missing in config because status != Validated"
fi

info "Creating job file (${create_job})"
for run_name in $(jq -r '.[] | select(.status == "Validated") | .set.name' "${runs_json}"); do
    [[ "${run_name}" != "null" ]] || die "Unable to extract run name from ${runs_json}. Received null."
    echo "${CREATE_ARIA_SCRIPT} ${run_name} ${tmp_dir}"
done > "${create_job}"
chmod +x "${create_job}"

info "Executing job script (see ${create_log})"
maximum_jobs=$(($(nproc) -1))
parallel --jobs "${maximum_jobs}" -I% --max-args 1 % < "${create_job}" > "${create_log}" 2>&1

info "Printing any potential non INFO lines from log here"
grep -v '\[INFO\]' "${create_log}"

info "Checking log for errors and warnings with check_log_file (will print if any found)"
check_log_file "${create_log}"

info "Combining aria.txt files into ${out_config}"
find "${tmp_dir}" -mindepth 1 -maxdepth 1 -type f -name "*_*.aria.txt" -exec cat {} \+ > "${out_config}"

info "Writing file sizes to ${out_gcp_du}"
if [[ "$(find "${tmp_dir}" -name "*_internal_urls.txt" | wc -l)" -lt 1 ]]; then
    error "No internal urls files found (should not happen)."
else
    # Intellij wants you to quote the find cmd: don't do this as du will work only on first file
    # shellcheck disable=SC2046
    gsutil du -shc $(find "${tmp_dir}" -name "*_internal_urls.txt" -exec cat {} +) > "${out_gcp_du}"
fi

info "Action: Check one URL manually in browser"
grep https "${out_config}" | tail -1

info "Cleaning up tmp dir (${tmp_dir})"
find "${tmp_dir}" -type f -delete

info "Action: If all OK you can upload final config to Nextcloud with:"
echo " upload_files_to_nextcloud_research ${out_config}"

non_info_count=$(grep -vc '\[INFO\]' "${create_log}")
if [[ "${non_info_count}" -gt 0 ]]; then
    warn "Non-info lines were encountered in log. Proceed with caution!!"
fi
echo ""