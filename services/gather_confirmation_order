#!/usr/bin/env bash

source message_functions || exit 1

SUBMISSIONS_DIR="/data/submissions"

confirmation_order=$1

if [[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]] ; then
    echo " Usage: $0 HARTWIG-001-OB045"
    exit 1
fi
[[ -n "${confirmation_order}" ]] || die "Missing confirmation order as input"


# Setting up variables
out_path="${SUBMISSIONS_DIR}/${confirmation_order}"
log_file="${out_path}/log.txt"
date_string=$(date)

samp_file="${out_path}/samples.txt"
runs_file="${out_path}/runs.txt"
barc_file="${out_path}/barcodes.txt"
repo_file="${out_path}/report.txt"
lama_json="${out_path}/lama.json"
samp_json="${samp_file/.txt/.json}"
runs_json="${runs_file/.txt/.json}"

# Create dirs
[[ ! -e "${out_path}" ]] || die "Output dir exists already (${out_path})"
mkdir -p "${out_path}" || die "Unable to create output dir (${out_path})"

# Gather submission info from LAMA
lama_json=$(curl -s -X 'GET' -H 'accept: */*' "http://lama.prod-1/api/hss/order-confirmation/${confirmation_order}") || die "Could not get data from LAMA for confirmation order ${confirmation_order}"
p_type=$(jq -r '.servicesSamples | .[] | length' <<< "${lama_json}")
p_count=$(jq -r '.servicesSamples | .[0].dataOutputLevel' <<< "${lama_json}")
r_name=$(jq -r '.reportContacts.name' <<< "${lama_json}")
r_mail=$(jq -r '.reportContacts.email' <<< "${lama_json}")
d_name=$(jq -r '.dataContacts.name' <<< "${lama_json}")
d_mail=$(jq -r '.dataContacts.email' <<< "${lama_json}")

# Get sample info from HMF API
info "Querying HMF API to get sample status"
api samples "${confirmation_order}" submission > "${samp_file}"
api_samples_json=$(hmf_api_get "samples?submission=${confirmation_order}")

total_yield_gbase=$(echo "${api_samples_json}" | jq '[.[].yld] | add / 1000000000 | floor')
echo "${api_samples_json}" > "${samp_json}"

# Get run info from HMF API
info "Querying HMF API to get run status"
api runs "${confirmation_order}" set_name_contains > "${runs_file}"
api_runs_json=$(hmf_api_get "runs?set_name_contains=${confirmation_order}")
echo "${api_runs_json}" > "${runs_json}"

# Get counts to check completeness
api_count=$(echo "${api_samples_json}" | jq -c '[.[] | select(.status=="Ready")] | length')

# Setup barcodes file
grep -v "^#" "${samp_file}" | cut -f2 > "${barc_file}"

# Setup reporting info
rm -f "${repo_file}"
pdf_name="${confirmation_order}.pdf"

printf '%s\n' " # Project metadata table for report (${pdf_name})" \
"${r_name}" "${r_mail}" "${d_mail}"  "${confirmation_order}" \
"${api_count}" "${p_type}" "${total_yield_gbase} GBase" \
"" "# Sample table for report:" >> "${repo_file}"

{
    while read -r line; do
        barc=$(echo "${line}" | cut -f1)
        q30M=$(echo "${line}" | cut -f2)
        yldR=$(echo "${line}" | cut -f3)
        yldM=$(echo "${line}" | cut -f4)
        name=$(echo "${line}" | cut -f5)
        date=$(cat ${lama_json} | jq -r '.servicesSamples | .[] | select( .barcode == \"${barc}\" ) | .arrivalDate')
        q30M=$(printf "%'.1f\n" "${q30M}") # q30 with one decimal
        yldR=$(printf "%'.f\n" "$((yldR / 1000000))") # yield to MBase
        yldM=$(printf "%'.f\n" "$((yldM / 1000000))") # yield to MBase
        printf "%s\t" "${barc}" "${q30M}" "${yldR}" "${yldM}" "${name}" "${date}"
    done < <(echo "${api_samples_json}" | jq -rc '.[] | [.barcode,.q30,.yld_req,.yld,.name] | @tsv')
} >> "${repo_file}"

{
    echo "#           Date = ${date_string}"
    echo "#        Project = ${confirmation_order}"
    echo "#   Sample Count = ${p_count}"
    echo "#     Data Count = ${api_count}"
    echo "#    Yield GBase = ${total_yield_gbase}"
    echo "# Report Contact = ${r_name} (${r_mail})"
    echo "#   Data Contact = ${d_name} (${d_mail})"
} >> "${log_file}"

info "Inspect output files:"
info " cd ${out_path}"
info " cat ${log_file}"
info " cat ${lama_json} | jq"
info " cat ${samp_file}"
info " cat ${runs_file}"
echo ""


info "And/or get the aria2 download config:"
echo " nohup gather_submission_aria_config ${confirmation_order} > ${out_path}/gather_aria.log &"
echo ""

info "And/or print info for (PDF) report:"
echo " cat ${repo_file}"
echo ""

info "And generate final test report (FILL IN your name!)"
echo " generate_final_test_report.py -i ${repo_file} -o ${out_path}/ -n 'Name'"
echo ""

info "And/or send mail, change settings as needed!"
echo " msg -s -t ss ${confirmation_order}"
echo ""

# Warn if not potentially complete
if [[ ${p_count} -ne ${api_count} ]]; then
    warn "Not all samples have status Ready (so FASTQ might be missing)!"
fi