#!/usr/bin/env bash

source locate_files || exit 1
source metadata_functions || exit 1
source message_functions || exit 1

run_dir=$1 && shift

if [[ -z "${run_dir}" ]]; then
    error "No run dir configured. Exiting"
fi

ref_sample=$(load_ref_sample_from_metadata ${run_dir})
tumor_sample=$(load_tumor_sample_from_metadata ${run_dir})

info "Files that must exist in every circumstance"

ref_sample_metrics_file=$(locate_wgs_metrics ${run_dir} ${ref_sample})
if [[ $? = 0 ]]; then info " WGSMetrics Ref Sample: ${ref_sample_metrics_file}"; fi

tumor_sample_metrics_file=$(locate_wgs_metrics ${run_dir} ${tumor_sample})
if [[ $? = 0 ]]; then info " WGSMetrics Tumor Sample: ${tumor_sample_metrics_file}"; fi

ref_sample_flagstats=$(locate_flagstats ${run_dir} ${ref_sample})
if [[ $? = 0 ]]; then info " Flagstats Ref Sample: ${ref_sample_flagstats}"; fi

tumor_sample_flagstats=$(locate_flagstats ${run_dir} ${tumor_sample})
if [[ $? = 0 ]]; then info " Flagstats Tumor Sample: ${tumor_sample_flagstats}"; fi

amber_dir=$(locate_amber_directory ${run_dir})
if [[ $? = 0 ]]; then info " AMBER directory: ${amber_dir}"; fi

gatk_germline_variants=$(locate_gatk_germline_variants ${run_dir})
if [[ $? = 0 ]]; then info " GATK Germline Variants: ${gatk_germline_variants}"; fi

sage_somatic_variants=$(locate_sage_filtered_somatic_variants ${run_dir})
if [[ $? = 0 ]]; then info " SAGE Somatic VCF: ${sage_somatic_variants}"; fi

sage_tumor_bqr_tsv=$(locate_sage_bqr_tsv ${run_dir} ${tumor_sample})
if [[ $? = 0 ]]; then info " SAGE Tumor BQR TSV: ${sage_tumor_bqr_tsv}"; fi

sage_reference_bqr_tsv=$(locate_sage_bqr_tsv ${run_dir} ${ref_sample})
if [[ $? = 0 ]]; then info " SAGE Reference BQR TSV: ${sage_reference_bqr_tsv}"; fi

sage_tumor_bqr_plot=$(locate_sage_bqr_plot ${run_dir} ${tumor_sample})
if [[ $? = 0 ]]; then info " SAGE Tumor BQR Plot: ${sage_tumor_bqr_plot}"; fi

sage_reference_bqr_plot=$(locate_sage_bqr_plot ${run_dir} ${ref_sample})
if [[ $? = 0 ]]; then info " SAGE Reference BQR Plot: ${sage_reference_bqr_plot}"; fi

sage_germline_gene_coverage=$(locate_sage_germline_gene_coverage ${run_dir})
if [[ $? = 0 ]]; then info " SAGE Germline Gene Coverage: ${sage_germline_gene_coverage}"; fi

purple_data_directory=$(locate_purple_data_directory ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Data Directory: ${purple_data_directory}"; fi

purple_somatic_variants=$(locate_purple_somatic_variants ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Somatic VCF: ${purple_somatic_variants}"; fi

purple_germline_variants=$(locate_purple_germline_variants ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Germline VCF: ${purple_germline_variants}"; fi

purple_purity=$(locate_purple_purity ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Purity: ${purple_purity}"; fi

purple_qc=$(locate_purple_qc ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE QC: ${purple_qc}"; fi

purple_somatic_driver_catalog=$(locate_purple_somatic_driver_catalog ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Somatic Driver Catalog: ${purple_somatic_driver_catalog}"; fi

purple_germline_driver_catalog=$(locate_purple_germline_driver_catalog ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Germline Driver Catalog: ${purple_germline_driver_catalog}"; fi

purple_somatic_copynumber_tsv=$(locate_purple_somatic_copynumber_tsv ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Somatic Copynumbers: ${purple_somatic_copynumber_tsv}"; fi

purple_gene_copynumbers=$(locate_purple_gene_copynumbers ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Gene Copynumbers: ${purple_gene_copynumbers}"; fi

purple_germline_deletions=$(locate_purple_germline_deletions ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Germline Deletions: ${purple_germline_deletions}"; fi

purple_plot_directory=$(locate_purple_plot_directory ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Plot Directory: ${purple_plot_directory}"; fi

purple_circos_plot=$(locate_purple_circos_plot ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Circos Plot: ${purple_circos_plot}"; fi

purple_structural_variants=$(locate_purple_structural_variants ${run_dir})
if [[ $? = 0 ]]; then info " PURPLE Structural VCF: ${purple_structural_variants}"; fi

gripss_structural_variants=$(locate_gripss_structural_variants ${run_dir})
if [[ $? = 0 ]]; then info " GRIPSS Filtered Structural VCF: ${gripss_structural_variants}"; fi

gripss_recovery_candidates=$(locate_gripss_recovery_candidates ${run_dir})
if [[ $? = 0 ]]; then info " GRIPSS Recovery Candidates VCF: ${gripss_recovery_candidates}"; fi

linx_somatic_data_directory=$(locate_linx_somatic_data_directory ${run_dir})
if [[ $? = 0 ]]; then info " LINX Somatic Data Directory: ${linx_somatic_data_directory}"; fi

linx_germline_data_directory=$(locate_linx_germline_data_directory ${run_dir})
if [[ $? = 0 ]]; then info " LINX Germline Data Directory: ${linx_germline_data_directory}"; fi

linx_structural_variants=$(locate_linx_structural_variants ${run_dir})
if [[ $? = 0 ]]; then info " Linx Structural Variants: ${linx_structural_variants}"; fi

linx_fusions=$(locate_linx_fusions ${run_dir})
if [[ $? = 0 ]]; then info " Linx Fusions: ${linx_fusions}"; fi

linx_breakends=$(locate_linx_breakends ${run_dir})
if [[ $? = 0 ]]; then info " Linx Breakends: ${linx_breakends}"; fi

linx_driver_catalog=$(locate_linx_driver_catalog ${run_dir})
if [[ $? = 0 ]]; then info " Linx Driver Catalog: ${linx_driver_catalog}"; fi

linx_drivers=$(locate_linx_drivers ${run_dir})
if [[ $? = 0 ]]; then info " Linx Drivers: ${linx_drivers}"; fi

linx_germline_disruptions=$(locate_linx_germline_disruptions ${run_dir})
if [[ $? = 0 ]]; then info " Linx Germline Disruptions: ${linx_germline_disruptions}"; fi

lilac_results=$(locate_lilac_results ${run_dir})
if [[ $? = 0 ]]; then info " LILAC Results: ${lilac_results}"; fi

lilac_qc=$(locate_lilac_qc ${run_dir})
if [[ $? = 0 ]]; then info " LILAC QC: ${lilac_qc}"; fi

lilac_tumor_hla_bam=$(locate_lilac_hla_bam_for_sample ${run_dir} ${tumor_sample})
if [[ $? = 0 ]]; then info " LILAC Tumor HLA BAM: ${lilac_tumor_hla_bam}"; fi

lilac_reference_hla_bam=$(locate_lilac_hla_bam_for_sample ${run_dir} ${ref_sample})
if [[ $? = 0 ]]; then info " LILAC Reference HLA BAM: ${lilac_reference_hla_bam}"; fi

chord_prediction=$(locate_chord_prediction ${run_dir})
if [[ $? = 0 ]]; then info " CHORD Prediction File: ${chord_prediction}"; fi

virus_breakend_tsv=$(locate_virus_breakend_tsv ${run_dir})
if [[ $? = 0 ]]; then info " VIRUSBreakend Output: ${virus_breakend_tsv}"; fi

annotated_virus_tsv=$(locate_virus_annotation_tsv ${run_dir})
if [[ $? = 0 ]]; then info " Annotated Virus File: ${annotated_virus_tsv}"; fi

peach_genotype_tsv=$(locate_peach_prod_genotype ${run_dir})
if [[ $? = 0 ]]; then info " PEACH Genotypes: ${peach_genotype_tsv}"; fi

sigs_allocation_tsv=$(locate_sigs_allocation_tsv ${run_dir})
if [[ $? = 0 ]]; then info " SIGS Allocations: ${sigs_allocation_tsv}"; fi

orange_json=$(locate_orange_json ${run_dir})
if [[ $? = 0 ]]; then info " ORANGE JSON: ${orange_json}"; fi

orange_pdf=$(locate_orange_pdf ${run_dir})
if [[ $? = 0 ]]; then info " ORANGE PDF: ${orange_pdf}"; fi
