#!/usr/bin/env bash

source message_functions || exit 1

imply_ref_sample_from_tumor_sample() {
    local tumor_sample=$1
    echo $(echo ${tumor_sample} | cut -c1-12)R
}

find_barcode_for_sample_name() {
    local sample=$1
    # We take the first record regardless of how many LIMS entries match to a sample name. This is potentially risky.
    query_lims.pl -type samples -filter "sample_name=${sample}" -exact -json | jq -r '.[0].sample_id'
}

find_ref_barcode_for_sample_name() {
    local sample=$1
    # We take the first record regardless of how many LIMS entries match to a sample name. This is potentially risky.
    query_lims.pl -type samples -filter "sample_name=${sample}" -exact -json | jq -r '.[0].ref_sample_id'
}

find_name_for_barcode() {
    local barcode=$1
    query_lims.pl -type samples -filter "sample_id=${barcode}" -exact -json | jq -r '.[].sample_name'
}

find_cohort_type() {
    local barcode=$1
    # We take the first record regardless of how many LIMS entries match to a sample name. This is potentially risky.
    query_lims.pl -type samples -filter "sample_id=${barcode}" -exact -json | jq -r '.[0].cohort'
}

get_doids_for_biopsy() {
    local biopsy=$1 && shift # eg CPCT02010001T
    doid_file=$(get_doids_file)
    column_index=7
    expected_field="doids"
    name_regex='^((CPCT|DRUP|WIDE|CORE|ACTN|SHRP|GAYA|OPTC|OMIC|GLOW)[0-9A-Z]{2}([0-9A-Z]{2})[0-9]{4})(T|R){1}[IVX0-9]*$'

    # sanity check on header content
    header_field=$(cat ${doid_file} | head -1 | cut -f"${column_index}")
    [[ "${expected_field}" == "${header_field}" ]] || die "Header wrong of $doid_file (expected:${expected_field}, found:${header_field})"
    [[ "${biopsy}" =~ ${name_regex} ]] || die "Provided biopsy ${biopsy} does not match regex ($name_regex)"
    patient="${BASH_REMATCH[1]}"
    # sanity check on match count
    count="$(cat "${doid_file}" | awk -v patient="${patient}" '$1==patient' | wc -l)"
    [[ "${count}" -lt 2 ]] || die "Patient ${patient} matches more than one line in ${doid_file}"

    doids=$(cat "${doid_file}" | grep -P "^${patient}" | cut -f${column_index})
    echo "${doids}"
}

get_tumorlocation_for_biopsy() {
    local biopsy=$1 && shift # eg CPCT02010001T
    doid_file=$(get_doids_file)
    name_regex='^((CPCT|DRUP|WIDE|CORE|ACTN|SHRP|GAYA|OPTC|OMIC|GLOW)[0-9A-Z]{2}([0-9A-Z]{2})[0-9]{4})(T|R){1}[IVX0-9]*$'
    [[ "${biopsy}" =~ ${name_regex} ]] || die "Provided biopsy ${biopsy} does not match regex ($name_regex)"
    patient="${BASH_REMATCH[1]}"
    tumorLocation=$(cat "${doid_file}" | grep -P "^${patient}" | awk 'BEGIN {FS="\t"}; {print $2, $3, $4, $5, $6, $7}')
    echo "${tumorLocation}"
}

get_doids_for_biopsy_pilot() {
    local biopsy=$1 && shift # eg CPCT02010001T
    doid_file=$(get_doids_file_pilot)
    column_index=7
    expected_field="doids"
    name_regex='^((CPCT|DRUP|WIDE|CORE|ACTN|SHRP|GAYA|OPTC|OMIC|GLOW)[0-9A-Z]{2}([0-9A-Z]{2})[0-9]{4})(T|R){1}[IVX0-9]*$'

    # sanity check on header content
    header_field=$(cat ${doid_file} | head -1 | cut -f"${column_index}")
    [[ "${expected_field}" == "${header_field}" ]] || die "Header wrong of $doid_file (expected:${expected_field}, found:${header_field})"
    [[ "${biopsy}" =~ ${name_regex} ]] || die "Provided biopsy ${biopsy} does not match regex ($name_regex)"
    patient="${BASH_REMATCH[1]}"
    # sanity check on match count
    count="$(cat "${doid_file}" | awk -v patient="${patient}" '$1==patient' | wc -l)"
    [[ "${count}" -lt 2 ]] || die "Patient ${patient} matches more than one line in ${doid_file}"

    doids=$(cat "${doid_file}" | grep -P "^${patient}" | cut -f${column_index})
    echo "${doids}"
}

get_doids_file() {
    doid_file="/data/dbs/clinical_data/curated_primary_tumor_from_lama.tsv"
    if [[ ! -f ${doid_file} ]]; then
        warn "DOIDs file not found. On GCP you should use API to retrieve DOIDs!"
    fi
    echo ${doid_file}
}

get_doids_file_pilot() {
    doid_file="/data/dbs/clinical_data/curated_primary_tumor_from_lama.tsv"
    if [[ ! -f ${doid_file} ]]; then
        warn "DOIDs file not found. On GCP you should use API to retrieve DOIDs!"
    fi
    echo ${doid_file}
}
